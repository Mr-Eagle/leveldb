<mxfile host="app.diagrams.net" modified="2022-07-07T07:25:53.129Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36" etag="j7paDiwVkmXZHVkw9s33" version="20.0.1" type="github">
  <diagram id="KQUctLpCu2ntFSWZS1Xu" name="第 1 页">
    <mxGraphModel dx="4031" dy="3173" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" background="#F4F1DE" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="ToC9YKNpf1hCUuCHKTob-45" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" source="ToC9YKNpf1hCUuCHKTob-37" target="ToC9YKNpf1hCUuCHKTob-39" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="40" y="1673" />
              <mxPoint x="674" y="1673" />
              <mxPoint x="674" y="1825" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--6" value="hello_leveldb.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-387" y="6" width="384" height="330" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--7" value="    leveldb::DB *db = nullptr;&#xa;    // std::cout &lt;&lt; leveldb::hello&lt;&lt;std::endl;&#xa;    leveldb::Options options;" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="30" width="384" height="52" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--8" value="    options.create_if_missing = true; //更新状态机" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="82" width="384" height="30" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--43" value="leveldb::Status status = leveldb::DB::Open(options, &quot;/tmp/testdb&quot;, &amp;db);" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="112" width="384" height="30" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--44" value="    //判断状态是否正常&#xa;    assert(status.ok());" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="142" width="384" height="30" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--45" value="//创建k-v&#xa;    std::string key = &quot;A&quot;;&#xa;    std::string value = &quot;a&quot;;&#xa;    std::string get_value; //获取value" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="172" width="384" height="64" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--46" value="    leveldb::Status s = db-&gt;Put(leveldb::WriteOptions(), key, value);" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="236" width="384" height="44" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--47" value="    if (s.ok())&#xa;        s = db-&gt;Get(leveldb::ReadOptions(), &quot;A&quot;, &amp;get_value);" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--6" vertex="1">
          <mxGeometry y="280" width="384" height="50" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--10" value="options.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="376" y="-1222" width="290" height="369" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--11" value="namespace leveldb&#xa;{&#xa;  Options::Options()&#xa;      : comparator(BytewiseComparator()),&#xa;        env(Env::Default()),&#xa;        compression(kSnappyCompression),&#xa;        create_if_missing(false),&#xa;        error_if_exists(false),&#xa;        paranoid_checks(false),&#xa;        info_log(NULL),&#xa;        write_buffer_size(4 &lt;&lt; 20),&#xa;        max_open_files(1000),&#xa;        block_cache(NULL),&#xa;        block_size(4096),&#xa;        block_restart_interval(16),&#xa;        max_file_size(2 &lt;&lt; 20),&#xa;        reuse_logs(false),&#xa;        filter_policy(NULL)&#xa;  {&#xa;  }&#xa;} // namespace leveldb" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--10" vertex="1">
          <mxGeometry y="30" width="290" height="339" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--14" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;labelBackgroundColor=#F4F1DE;" parent="1" source="UuF3cB1NPZclrfG2085--7" target="UuF3cB1NPZclrfG2085--11" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="93" y="62" />
              <mxPoint x="93" y="-1022" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--20" value="comparator.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="778" y="-1272" width="328" height="387" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--23" value="class Comparator {&#xa; public:&#xa;  virtual ~Comparator();&#xa;  virtual const char* Name() const = 0;&#xa;  virtual void FindShortestSeparator(&#xa;      std::string* start,&#xa;      const Slice&amp; limit) const = 0;&#xa;  virtual void FindShortSuccessor(std::string* key) const = 0;&#xa;};&#xa;extern const Comparator* BytewiseComparator();&#xa;}" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--20" vertex="1">
          <mxGeometry y="30" width="328" height="179" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--28" value="static port::OnceType once = LEVELDB_ONCE_INIT;&#xa;static const Comparator* bytewise;" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--20" vertex="1">
          <mxGeometry y="209" width="328" height="43" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--30" value="static void InitModule() {&#xa;  bytewise = new BytewiseComparatorImpl;&#xa;}" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--20" vertex="1">
          <mxGeometry y="252" width="328" height="66" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--32" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;labelBackgroundColor=#F4F1DE;" parent="UuF3cB1NPZclrfG2085--20" source="UuF3cB1NPZclrfG2085--21" target="UuF3cB1NPZclrfG2085--30" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--21" value="const Comparator* BytewiseComparator() {&#xa;  port::InitOnce(&amp;once, InitModule);&#xa;  return bytewise;&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--20" vertex="1">
          <mxGeometry y="318" width="328" height="69" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--24" value="port_posix.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1239" y="-1274" width="486" height="629" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--25" value="namespace leveldb&#xa;&#xa;{&#xa;  namespace port&#xa;  {&#xa;    static void PthreadCall(const char *label, int result)&#xa;    {&#xa;      if (result != 0)&#xa;      {&#xa;        fprintf(stderr, &quot;pthread %s: %s\n&quot;, label, strerror(result));&#xa;        abort();&#xa;      }&#xa;    }&#xa;    Mutex::Mutex() { PthreadCall(&quot;init mutex&quot;, pthread_mutex_init(&amp;mu_, NULL)); }&#xa;    Mutex::~Mutex() { PthreadCall(&quot;destroy mutex&quot;, pthread_mutex_destroy(&amp;mu_)); }&#xa;    void Mutex::Lock() { PthreadCall(&quot;lock&quot;, pthread_mutex_lock(&amp;mu_)); }&#xa;    void Mutex::Unlock() { PthreadCall(&quot;unlock&quot;, pthread_mutex_unlock(&amp;mu_)); }&#xa;    CondVar::CondVar(Mutex *mu)&#xa;        : mu_(mu)&#xa;    {&#xa;      PthreadCall(&quot;init cv&quot;, pthread_cond_init(&amp;cv_, NULL));&#xa;    }&#xa;    CondVar::~CondVar() { PthreadCall(&quot;destroy cv&quot;, pthread_cond_destroy(&amp;cv_)); }&#xa;    void CondVar::Wait()&#xa;    {&#xa;      PthreadCall(&quot;wait&quot;, pthread_cond_wait(&amp;cv_, &amp;mu_-&gt;mu_));&#xa;    }&#xa;    void CondVar::Signal()&#xa;    {&#xa;      PthreadCall(&quot;signal&quot;, pthread_cond_signal(&amp;cv_));&#xa;    }&#xa;    void CondVar::SignalAll()&#xa;    {&#xa;      PthreadCall(&quot;broadcast&quot;, pthread_cond_broadcast(&amp;cv_));&#xa;    }&#xa;    void InitOnce(OnceType *once, void (*initializer)())&#xa;    {&#xa;      PthreadCall(&quot;once&quot;, pthread_once(once, initializer));&#xa;    }&#xa;  } // namespace port&#xa;} // namespace leveldb&#xa;" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--24" vertex="1">
          <mxGeometry y="30" width="486" height="599" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--27" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;labelBackgroundColor=#F4F1DE;" parent="1" source="UuF3cB1NPZclrfG2085--21" target="UuF3cB1NPZclrfG2085--25" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--31" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;labelBackgroundColor=#F4F1DE;" parent="1" target="UuF3cB1NPZclrfG2085--21" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="662" y="-1072.5" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--33" value="env.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="747" y="-853" width="418" height="839" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--34" value="class Env {&#xa; public:&#xa;  Env() { }&#xa;  virtual ~Env();&#xa;  static Env* Default();&#xa;  virtual Status NewSequentialFile(const std::string&amp; fname,&#xa;                                   SequentialFile** result) = 0;&#xa;  virtual Status NewRandomAccessFile(const std::string&amp; fname,&#xa;                                     RandomAccessFile** result) = 0;&#xa;  virtual Status NewWritableFile(const std::string&amp; fname,&#xa;                                 WritableFile** result) = 0;&#xa;  virtual Status NewAppendableFile(const std::string&amp; fname,&#xa;                                   WritableFile** result);&#xa;  virtual bool FileExists(const std::string&amp; fname) = 0;&#xa;  virtual Status GetChildren(const std::string&amp; dir,&#xa;                             std::vector&lt;std::string&gt;* result) = 0;&#xa;  virtual Status DeleteFile(const std::string&amp; fname) = 0;&#xa;  virtual Status CreateDir(const std::string&amp; dirname) = 0;&#xa;  virtual Status DeleteDir(const std::string&amp; dirname) = 0;&#xa;  virtual Status GetFileSize(const std::string&amp; fname, uint64_t* file_size) = 0;&#xa;  virtual Status RenameFile(const std::string&amp; src,&#xa;                            const std::string&amp; target) = 0;&#xa;  virtual Status LockFile(const std::string&amp; fname, FileLock** lock) = 0;&#xa;  virtual Status UnlockFile(FileLock* lock) = 0;&#xa;  virtual void Schedule(&#xa;      void (*function)(void* arg),&#xa;      void* arg) = 0;&#xa;  virtual void StartThread(void (*function)(void* arg), void* arg) = 0;&#xa;  virtual Status GetTestDirectory(std::string* path) = 0;&#xa;  virtual Status NewLogger(const std::string&amp; fname, Logger** result) = 0;&#xa;  virtual uint64_t NowMicros() = 0;&#xa;  virtual void SleepForMicroseconds(int micros) = 0;&#xa; private:&#xa;  Env(const Env&amp;);&#xa;  void operator=(const Env&amp;);&#xa;};" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--33" vertex="1">
          <mxGeometry y="30" width="418" height="542" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--36" value="  Env *Env::Default()&#xa;  {&#xa;    pthread_once(&amp;once, InitDefaultEnv);&#xa;    return default_env;&#xa;  }" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--33" vertex="1">
          <mxGeometry y="572" width="418" height="76" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-5" value="class Logger&#xa;  {&#xa;  public:&#xa;    Logger() {}&#xa;    virtual ~Logger();&#xa;    // Write an entry to the log file with the specified format.&#xa;    virtual void Logv(const char *format, va_list ap) = 0;&#xa;  private:&#xa;    // No copying allowed&#xa;    Logger(const Logger &amp;);&#xa;    void operator=(const Logger &amp;);&#xa;  };" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--33" vertex="1">
          <mxGeometry y="648" width="418" height="191" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--35" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;labelBackgroundColor=#F4F1DE;" parent="1" target="UuF3cB1NPZclrfG2085--34" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="662" y="-1072.5" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--37" value="env_posix.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="2428" y="-1580" width="536" height="4418" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--38" value="enum CompressionType {&#xa;  // NOTE: do not change the values of existing entries, as these are&#xa;  // part of the persistent format on disk.&#xa;  kNoCompression     = 0x0,&#xa;  kSnappyCompression = 0x1&#xa;};&#xa;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--37" vertex="1">
          <mxGeometry y="30" width="536" height="96" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-28" value="  static Env *default_env;&#xa;  static void InitDefaultEnv() { default_env = new PosixEnv; }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--37" vertex="1">
          <mxGeometry y="126" width="536" height="34" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-30" value="class PosixEnv : public Env&#xa;    {&#xa;    public:&#xa;      PosixEnv();&#xa;      virtual ~PosixEnv()&#xa;      {&#xa;        char msg[] = &quot;Destroying Env::Default()\n&quot;;&#xa;        fwrite(msg, 1, sizeof(msg), stderr);&#xa;        abort();&#xa;      }&#xa;      virtual Status NewSequentialFile(const std::string &amp;fname,&#xa;                                       SequentialFile **result)&#xa;      {&#xa;        FILE *f = fopen(fname.c_str(), &quot;r&quot;);&#xa;        if (f == NULL)&#xa;        {&#xa;          *result = NULL;&#xa;          return IOError(fname, errno);&#xa;        }&#xa;        else&#xa;        {&#xa;          *result = new PosixSequentialFile(fname, f);&#xa;          return Status::OK();&#xa;        }&#xa;      }&#xa;      virtual Status NewRandomAccessFile(const std::string &amp;fname,&#xa;                                         RandomAccessFile **result)&#xa;      {&#xa;        *result = NULL;&#xa;        Status s;&#xa;        int fd = open(fname.c_str(), O_RDONLY);&#xa;        if (fd &lt; 0)&#xa;        {&#xa;          s = IOError(fname, errno);&#xa;        }&#xa;        else if (mmap_limit_.Acquire())&#xa;        {&#xa;          uint64_t size;&#xa;          s = GetFileSize(fname, &amp;size);&#xa;          if (s.ok())&#xa;          {&#xa;            void *base = mmap(NULL, size, PROT_READ, MAP_SHARED, fd, 0);&#xa;            if (base != MAP_FAILED)&#xa;            {&#xa;              *result = new PosixMmapReadableFile(fname, base, size, &amp;mmap_limit_);&#xa;            }&#xa;            else&#xa;            {&#xa;              s = IOError(fname, errno);&#xa;            }&#xa;          }&#xa;          close(fd);&#xa;          if (!s.ok())&#xa;          {&#xa;            mmap_limit_.Release();&#xa;          }&#xa;        }&#xa;        else&#xa;        {&#xa;          *result = new PosixRandomAccessFile(fname, fd, &amp;fd_limit_);&#xa;        }&#xa;        return s;&#xa;      }&#xa;      virtual Status NewWritableFile(const std::string &amp;fname,&#xa;                                     WritableFile **result)&#xa;      {&#xa;        Status s;&#xa;        FILE *f = fopen(fname.c_str(), &quot;w&quot;);&#xa;        if (f == NULL)&#xa;        {&#xa;          *result = NULL;&#xa;          s = IOError(fname, errno);&#xa;        }&#xa;        else&#xa;        {&#xa;          *result = new PosixWritableFile(fname, f);&#xa;        }&#xa;        return s;&#xa;      }&#xa;      virtual Status NewAppendableFile(const std::string &amp;fname,&#xa;                                       WritableFile **result)&#xa;      {&#xa;        Status s;&#xa;        FILE *f = fopen(fname.c_str(), &quot;a&quot;);&#xa;        if (f == NULL)&#xa;        {&#xa;          *result = NULL;&#xa;          s = IOError(fname, errno);&#xa;        }&#xa;        else&#xa;        {&#xa;          *result = new PosixWritableFile(fname, f);&#xa;        }&#xa;        return s;&#xa;      }&#xa;      virtual bool FileExists(const std::string &amp;fname)&#xa;      {&#xa;        return access(fname.c_str(), F_OK) == 0; //判断文件是否存在&#xa;      }&#xa;      virtual Status GetChildren(const std::string &amp;dir,&#xa;                                 std::vector&lt;std::string&gt; *result)&#xa;      {&#xa;        result-&gt;clear();&#xa;        DIR *d = opendir(dir.c_str());&#xa;        if (d == NULL)&#xa;        {&#xa;          return IOError(dir, errno);&#xa;        }&#xa;        struct dirent *entry;&#xa;        while ((entry = readdir(d)) != NULL)&#xa;        {&#xa;          result-&gt;push_back(entry-&gt;d_name);&#xa;        }&#xa;        closedir(d);&#xa;        return Status::OK();&#xa;      }&#xa;      virtual Status DeleteFile(const std::string &amp;fname)&#xa;      {&#xa;        Status result;&#xa;        if (unlink(fname.c_str()) != 0)&#xa;        {&#xa;          result = IOError(fname, errno);&#xa;        }&#xa;        return result;&#xa;      }&#xa;      virtual Status CreateDir(const std::string &amp;name)&#xa;      {&#xa;        Status result;&#xa;        if (mkdir(name.c_str(), 0755) != 0) //创建/tmp/testdb文件夹 设置权限 drwxr-xr-x.&#xa;        {&#xa;          result = IOError(name, errno);&#xa;        }&#xa;        return result;&#xa;      }&#xa;      virtual Status DeleteDir(const std::string &amp;name)&#xa;      {&#xa;        Status result;&#xa;        if (rmdir(name.c_str()) != 0)&#xa;        {&#xa;          result = IOError(name, errno);&#xa;        }&#xa;        return result;&#xa;      }&#xa;      virtual Status GetFileSize(const std::string &amp;fname, uint64_t *size)&#xa;      {&#xa;        Status s;&#xa;        struct stat sbuf;&#xa;        if (stat(fname.c_str(), &amp;sbuf) != 0)&#xa;        {&#xa;          *size = 0;&#xa;          s = IOError(fname, errno);&#xa;        }&#xa;        else&#xa;        {&#xa;          *size = sbuf.st_size;&#xa;        }&#xa;        return s;&#xa;      }&#xa;      virtual Status RenameFile(const std::string &amp;src, const std::string &amp;target)&#xa;      {&#xa;        Status result;&#xa;        if (rename(src.c_str(), target.c_str()) != 0)&#xa;        {&#xa;          result = IOError(src, errno);&#xa;        }&#xa;        return result;&#xa;      }&#xa;      virtual Status LockFile(const std::string &amp;fname, FileLock **lock)&#xa;      {&#xa;        *lock = nullptr; //再一次置空&#xa;        Status result;&#xa;        int fd = open(fname.c_str(), O_RDWR | O_CREAT, 0644); //创建文件&#xa;        if (fd &lt; 0)&#xa;        {&#xa;          result = IOError(fname, errno);&#xa;        }&#xa;        else if (!locks_.Insert(fname)) // !true&#xa;        {&#xa;          close(fd);&#xa;          result = Status::IOError(&quot;lock &quot; + fname, &quot;already held by process&quot;);&#xa;        }&#xa;        else if (LockOrUnlock(fd, true) == -1)&#xa;        //如果之前就已经上锁了，就返回-1，之前没有上锁就返回0&#xa;        {&#xa;          result = IOError(&quot;lock &quot; + fname, errno);&#xa;          close(fd);&#xa;          locks_.Remove(fname);&#xa;        }&#xa;        else&#xa;        {&#xa;          PosixFileLock *my_lock = new PosixFileLock;&#xa;          my_lock-&gt;fd_ = fd;&#xa;          my_lock-&gt;name_ = fname;&#xa;          *lock = my_lock;&#xa;        }&#xa;        return result;&#xa;      }&#xa;      virtual Status UnlockFile(FileLock *lock)&#xa;      {&#xa;        PosixFileLock *my_lock = reinterpret_cast&lt;PosixFileLock *&gt;(lock);&#xa;        Status result;&#xa;        if (LockOrUnlock(my_lock-&gt;fd_, false) == -1)&#xa;        {&#xa;          result = IOError(&quot;unlock&quot;, errno);&#xa;        }&#xa;        locks_.Remove(my_lock-&gt;name_);&#xa;        close(my_lock-&gt;fd_);&#xa;        delete my_lock;&#xa;        return result;&#xa;      }&#xa;      virtual void Schedule(void (*function)(void *), void *arg);&#xa;      virtual void StartThread(void (*function)(void *arg), void *arg);&#xa;      virtual Status GetTestDirectory(std::string *result)&#xa;      {&#xa;        const char *env = getenv(&quot;TEST_TMPDIR&quot;);&#xa;        if (env &amp;&amp; env[0] != &#39;\0&#39;)&#xa;        {&#xa;          *result = env;&#xa;        }&#xa;        else&#xa;        {&#xa;          char buf[100];&#xa;          snprintf(buf, sizeof(buf), &quot;/tmp/leveldbtest-%d&quot;, int(geteuid()));&#xa;          *result = buf;&#xa;        }&#xa;        // Directory may already exist&#xa;        CreateDir(*result);&#xa;        return Status::OK();&#xa;      }&#xa;      static uint64_t gettid()&#xa;      {&#xa;        pthread_t tid = pthread_self();&#xa;        uint64_t thread_id = 0;&#xa;        memcpy(&amp;thread_id, &amp;tid, std::min(sizeof(thread_id), sizeof(tid)));&#xa;        return thread_id;&#xa;      }&#xa;      virtual Status NewLogger(const std::string &amp;fname, Logger **result)&#xa;      {&#xa;        FILE *f = fopen(fname.c_str(), &quot;w&quot;);&#xa;        if (f == NULL)&#xa;        {&#xa;          *result = NULL;&#xa;          return IOError(fname, errno);&#xa;        }&#xa;        else&#xa;        {&#xa;          *result = new PosixLogger(f, &amp;PosixEnv::gettid);&#xa;          return Status::OK();&#xa;        }&#xa;      }&#xa;      virtual uint64_t NowMicros()&#xa;      {&#xa;        struct timeval tv;&#xa;        gettimeofday(&amp;tv, NULL);&#xa;        return static_cast&lt;uint64_t&gt;(tv.tv_sec) * 1000000 + tv.tv_usec;&#xa;      }&#xa;      virtual void SleepForMicroseconds(int micros)&#xa;      {&#xa;        usleep(micros);&#xa;      }&#xa;    private:&#xa;      void PthreadCall(const char *label, int result)&#xa;      {&#xa;        if (result != 0)&#xa;        {&#xa;          fprintf(stderr, &quot;pthread %s: %s\n&quot;, label, strerror(result));&#xa;          abort();&#xa;        }&#xa;      }&#xa;      // BGThread() is the body of the background thread&#xa;      void BGThread();&#xa;      static void *BGThreadWrapper(void *arg)&#xa;      {&#xa;        reinterpret_cast&lt;PosixEnv *&gt;(arg)-&gt;BGThread();&#xa;        return NULL;&#xa;      }&#xa;      pthread_mutex_t mu_;&#xa;      pthread_cond_t bgsignal_;&#xa;      pthread_t bgthread_;&#xa;      bool started_bgthread_;&#xa;      // Entry per Schedule() call&#xa;      struct BGItem&#xa;      {&#xa;        void *arg;&#xa;        void (*function)(void *);&#xa;      };&#xa;      typedef std::deque&lt;BGItem&gt; BGQueue;&#xa;      BGQueue queue_;&#xa;      PosixLockTable locks_;&#xa;      Limiter mmap_limit_;&#xa;      Limiter fd_limit_;&#xa;    };" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--37" vertex="1">
          <mxGeometry y="160" width="536" height="4123" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-33" value="PosixEnv::PosixEnv()&#xa;        : started_bgthread_(false),&#xa;          mmap_limit_(MaxMmaps()),&#xa;          fd_limit_(MaxOpenFiles())&#xa;    {&#xa;      PthreadCall(&quot;mutex_init&quot;, pthread_mutex_init(&amp;mu_, NULL));&#xa;      PthreadCall(&quot;cvar_init&quot;, pthread_cond_init(&amp;bgsignal_, NULL));&#xa;    }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--37" vertex="1">
          <mxGeometry y="4283" width="536" height="135" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--41" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;labelBackgroundColor=#F4F1DE;" parent="1" target="UuF3cB1NPZclrfG2085--38" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="671" y="-1072" />
              <mxPoint x="671" y="54" />
              <mxPoint x="705" y="54" />
              <mxPoint x="705" y="-1467" />
            </Array>
            <mxPoint x="662" y="-1072.5" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--48" value="db.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="189" y="-354" width="436" height="411" as="geometry" />
        </mxCell>
        <mxCell id="UuF3cB1NPZclrfG2085--49" value="class DB&#xa;  {&#xa;  public:&#xa;    static Status Open(const Options &amp;options,&#xa;                       const std::string &amp;name,&#xa;                       DB **dbptr);&#xa;    DB() {}&#xa;    virtual ~DB();&#xa;    virtual Status Put(const WriteOptions &amp;options,&#xa;                       const Slice &amp;key,&#xa;                       const Slice &amp;value) = 0;&#xa;    virtual Status Delete(const WriteOptions &amp;options, const Slice &amp;key) = 0;&#xa;    virtual Status Write(const WriteOptions &amp;options, WriteBatch *updates) = 0;&#xa;    virtual Status Get(const ReadOptions &amp;options,&#xa;                       const Slice &amp;key, std::string *value) = 0;&#xa;    virtual Iterator *NewIterator(const ReadOptions &amp;options) = 0;&#xa;    virtual const Snapshot *GetSnapshot() = 0;&#xa;    virtual void ReleaseSnapshot(const Snapshot *snapshot) = 0;&#xa;    virtual bool GetProperty(const Slice &amp;property, std::string *value) = 0;&#xa;    virtual void GetApproximateSizes(const Range *range, int n,&#xa;                                     uint64_t *sizes) = 0;&#xa;    virtual void CompactRange(const Slice *begin, const Slice *end) = 0;&#xa;  private:&#xa;    DB(const DB &amp;);&#xa;    void operator=(const DB &amp;);&#xa;  };" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="UuF3cB1NPZclrfG2085--48" vertex="1">
          <mxGeometry y="30" width="436" height="381" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-4" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=#F4F1DE;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;fillColor=#F2CC8F;strokeColor=#E07A5F;fontColor=#393C56;" parent="1" vertex="1">
          <mxGeometry x="1172.999918619792" y="-587.9965852864581" width="430" height="322" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-6" value="cache.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1215" y="-202" width="378" height="364" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-7" value="class Cache {&#xa; public:&#xa;  Cache() { }&#xa;  virtual ~Cache();&#xa;  struct Handle { };&#xa;  virtual Handle* Insert(const Slice&amp; key, void* value, size_t charge,&#xa;                         void (*deleter)(const Slice&amp; key, void* value)) = 0;&#xa;  virtual Handle* Lookup(const Slice&amp; key) = 0;&#xa;  virtual void Release(Handle* handle) = 0;&#xa;  virtual void* Value(Handle* handle) = 0;&#xa;  virtual void Erase(const Slice&amp; key) = 0;&#xa;  virtual uint64_t NewId() = 0;&#xa;  virtual void Prune() {}&#xa;  virtual size_t TotalCharge() const = 0;&#xa; private:&#xa;  void LRU_Remove(Handle* e);&#xa;  void LRU_Append(Handle* e);&#xa;  void Unref(Handle* e);&#xa;  struct Rep;&#xa;  Rep* rep_;&#xa;  Cache(const Cache&amp;);&#xa;  void operator=(const Cache&amp;);&#xa;};" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-6" vertex="1">
          <mxGeometry y="30" width="378" height="334" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-12" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.474;entryY=1.001;entryDx=0;entryDy=0;entryPerimeter=0;labelBackgroundColor=#F4F1DE;strokeColor=#E07A5F;fontColor=#393C56;" parent="1" target="ToC9YKNpf1hCUuCHKTob-7" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="662" y="-1072.5" as="sourcePoint" />
            <Array as="points">
              <mxPoint x="662" y="-1083" />
              <mxPoint x="670" y="-1083" />
              <mxPoint x="670" y="199" />
              <mxPoint x="1394" y="199" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-13" value="filter_policy.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1607" y="-33" width="411" height="192" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-14" value="class FilterPolicy&#xa;  {&#xa;  public:&#xa;    virtual ~FilterPolicy();&#xa;    virtual const char *Name() const = 0;&#xa;    virtual void CreateFilter(const Slice *keys, int n, std::string *dst)&#xa;        const = 0;&#xa;    virtual bool KeyMayMatch(const Slice &amp;key, const Slice &amp;filter) const = 0;&#xa;  };" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-13" vertex="1">
          <mxGeometry y="30" width="411" height="162" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;labelBackgroundColor=#F4F1DE;strokeColor=#E07A5F;fontColor=#393C56;" parent="1" target="ToC9YKNpf1hCUuCHKTob-13" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="662" y="-1072.5" as="sourcePoint" />
            <Array as="points">
              <mxPoint x="662" y="201" />
              <mxPoint x="1765" y="201" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-16" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" source="UuF3cB1NPZclrfG2085--7" target="UuF3cB1NPZclrfG2085--49" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-17" value="db_impl.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="155" y="118" width="457" height="1728" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-26" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="ToC9YKNpf1hCUuCHKTob-17" source="ToC9YKNpf1hCUuCHKTob-18" target="ToC9YKNpf1hCUuCHKTob-25" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="531" y="384" />
              <mxPoint x="531" y="952" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-18" value="Status DB::Open(const Options &amp;options, const std::string &amp;dbname,&#xa;                  DB **dbptr)&#xa;  {&#xa;    *dbptr = NULL;&#xa;    DBImpl *impl = new DBImpl(options, dbname); // options, &quot;/tmp/testdb&quot;&#xa;    impl-&gt;mutex_.Lock();                        //锁定&#xa;    VersionEdit edit;&#xa;    // Recover handles create_if_missing, error_if_exists&#xa;    bool save_manifest = false; //写入状态&#xa;    Status s = impl-&gt;Recover(&amp;edit, &amp;save_manifest);&#xa;    if (s.ok() &amp;&amp; impl-&gt;mem_ == NULL)&#xa;    {&#xa;      // Create new log and a corresponding memtable.&#xa;      uint64_t new_log_number = impl-&gt;versions_-&gt;NewFileNumber();&#xa;      WritableFile *lfile;&#xa;      s = options.env-&gt;NewWritableFile(LogFileName(dbname, new_log_number),&#xa;                                       &amp;lfile);&#xa;      if (s.ok())&#xa;      {&#xa;        edit.SetLogNumber(new_log_number);&#xa;        impl-&gt;logfile_ = lfile;&#xa;        impl-&gt;logfile_number_ = new_log_number;&#xa;        impl-&gt;log_ = new log::Writer(lfile);&#xa;        impl-&gt;mem_ = new MemTable(impl-&gt;internal_comparator_);&#xa;        impl-&gt;mem_-&gt;Ref();&#xa;      }&#xa;    }&#xa;    if (s.ok() &amp;&amp; save_manifest)&#xa;    {&#xa;      edit.SetPrevLogNumber(0); // No older logs needed after recovery.&#xa;      edit.SetLogNumber(impl-&gt;logfile_number_);&#xa;      s = impl-&gt;versions_-&gt;LogAndApply(&amp;edit, &amp;impl-&gt;mutex_);&#xa;    }&#xa;    if (s.ok())&#xa;    {&#xa;      impl-&gt;DeleteObsoleteFiles();&#xa;      impl-&gt;MaybeScheduleCompaction();&#xa;    }&#xa;    impl-&gt;mutex_.Unlock();&#xa;    if (s.ok())&#xa;    {&#xa;      assert(impl-&gt;mem_ != NULL);&#xa;      *dbptr = impl;&#xa;    }&#xa;    else&#xa;    {&#xa;      delete impl;&#xa;    }&#xa;    return s;&#xa;  }" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-17" vertex="1">
          <mxGeometry y="30" width="457" height="707" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-44" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="ToC9YKNpf1hCUuCHKTob-17" source="ToC9YKNpf1hCUuCHKTob-25" target="KjjygEA-8G5yH3GOAMU8-8" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-25" value="DBImpl::DBImpl(const Options &amp;raw_options, const std::string &amp;dbname)&#xa;      : env_(raw_options.env),&#xa;        internal_comparator_(raw_options.comparator),&#xa;        internal_filter_policy_(raw_options.filter_policy),&#xa;        options_(SanitizeOptions(dbname, &amp;internal_comparator_,&#xa;                                 &amp;internal_filter_policy_, raw_options)),&#xa;        owns_info_log_(options_.info_log != raw_options.info_log),&#xa;        owns_cache_(options_.block_cache != raw_options.block_cache),&#xa;        dbname_(dbname),&#xa;        db_lock_(NULL),&#xa;        shutting_down_(NULL),&#xa;        bg_cv_(&amp;mutex_),&#xa;        mem_(NULL),&#xa;        imm_(NULL),&#xa;        logfile_(NULL),&#xa;        logfile_number_(0),&#xa;        log_(NULL),&#xa;        seed_(0),&#xa;        tmp_batch_(new WriteBatch),&#xa;        bg_compaction_scheduled_(false),&#xa;        manual_compaction_(NULL)&#xa;  {&#xa;    has_imm_.Release_Store(NULL);&#xa;    // Reserve ten files or so for other uses and give the rest to TableCache.&#xa;    const int table_cache_size = options_.max_open_files - kNumNonTableCacheFiles;&#xa;    table_cache_ = new TableCache(dbname_, &amp;options_, table_cache_size);&#xa;    versions_ = new VersionSet(dbname_, &amp;options_, table_cache_,&#xa;                               &amp;internal_comparator_);&#xa;  }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-17" vertex="1">
          <mxGeometry y="737" width="457" height="429" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="ToC9YKNpf1hCUuCHKTob-17" source="KjjygEA-8G5yH3GOAMU8-8" target="KjjygEA-8G5yH3GOAMU8-14" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-8" value="Options SanitizeOptions(const std::string &amp;dbname,&#xa;                          const InternalKeyComparator *icmp,&#xa;                          const InternalFilterPolicy *ipolicy,&#xa;                          const Options &amp;src)&#xa;  { //类似于初始化一般的操作&#xa;    Options result = src;&#xa;    result.comparator = icmp;&#xa;    result.filter_policy = (src.filter_policy != NULL) ? ipolicy : NULL;&#xa;    ClipToRange(&amp;result.max_open_files, 64 + kNumNonTableCacheFiles, 50000);&#xa;    ClipToRange(&amp;result.write_buffer_size, 64 &lt;&lt; 10, 1 &lt;&lt; 30);&#xa;    ClipToRange(&amp;result.max_file_size, 1 &lt;&lt; 20, 1 &lt;&lt; 30);&#xa;    ClipToRange(&amp;result.block_size, 1 &lt;&lt; 10, 4 &lt;&lt; 20);&#xa;    if (result.info_log == NULL) // true&#xa;    {&#xa;      // Open a log file in the same directory as the db&#xa;      src.env-&gt;CreateDir(dbname);                                               // In case it does not exist&#xa;      src.env-&gt;RenameFile(InfoLogFileName(dbname), OldInfoLogFileName(dbname)); //&quot;/tmp/testdb/LOG&quot;  &quot;/tmp/testdb/LOG.olg&quot;&#xa;      Status s = src.env-&gt;NewLogger(InfoLogFileName(dbname), &amp;result.info_log); //&quot;/tmp/testdb/LOG&quot;&#xa;      if (!s.ok())                                                              // !true&#xa;      {&#xa;        // No place suitable for logging&#xa;        result.info_log = NULL;&#xa;      }&#xa;    }&#xa;    if (result.block_cache == NULL) // true&#xa;    {&#xa;      result.block_cache = NewLRUCache(8 &lt;&lt; 20); // 8388608&#xa;    }&#xa;    return result;&#xa;  }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-17" vertex="1">
          <mxGeometry y="1166" width="457" height="429" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-14" value="template &lt;class T, class V&gt;&#xa;  static void ClipToRange(T *ptr, V minvalue, V maxvalue)&#xa;  {&#xa;    if (static_cast&lt;V&gt;(*ptr) &gt; maxvalue)&#xa;      *ptr = maxvalue;&#xa;    if (static_cast&lt;V&gt;(*ptr) &lt; minvalue)&#xa;      *ptr = minvalue;&#xa;  }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-17" vertex="1">
          <mxGeometry y="1595" width="457" height="133" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-19" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" source="UuF3cB1NPZclrfG2085--43" target="ToC9YKNpf1hCUuCHKTob-18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-22" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" source="UuF3cB1NPZclrfG2085--49" target="ToC9YKNpf1hCUuCHKTob-18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-23" value="db_impl.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="778" y="224" width="437" height="2070" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-24" value="class DBImpl : public DB&#xa;  {&#xa;  public:&#xa;    DBImpl(const Options &amp;options, const std::string &amp;dbname);&#xa;    virtual ~DBImpl();&#xa;    // Implementations of the DB interface&#xa;    virtual Status Put(const WriteOptions &amp;, const Slice &amp;key, const Slice &amp;value);&#xa;    virtual Status Delete(const WriteOptions &amp;, const Slice &amp;key);&#xa;    virtual Status Write(const WriteOptions &amp;options, WriteBatch *updates);&#xa;    virtual Status Get(const ReadOptions &amp;options,&#xa;                       const Slice &amp;key,&#xa;                       std::string *value);&#xa;    virtual Iterator *NewIterator(const ReadOptions &amp;);&#xa;    virtual const Snapshot *GetSnapshot();&#xa;    virtual void ReleaseSnapshot(const Snapshot *snapshot);&#xa;    virtual bool GetProperty(const Slice &amp;property, std::string *value);&#xa;    virtual void GetApproximateSizes(const Range *range, int n, uint64_t *sizes);&#xa;    virtual void CompactRange(const Slice *begin, const Slice *end);&#xa;    // Extra methods (for testing) that are not in the public DB interface&#xa;    // Compact any files in the named level that overlap [*begin,*end]&#xa;    void TEST_CompactRange(int level, const Slice *begin, const Slice *end);&#xa;    // Force current memtable contents to be compacted.&#xa;    Status TEST_CompactMemTable();&#xa;    // Return an internal iterator over the current state of the database.&#xa;    // The keys of this iterator are internal keys (see format.h).&#xa;    // The returned iterator should be deleted when no longer needed.&#xa;    Iterator *TEST_NewInternalIterator();&#xa;    // Return the maximum overlapping data (in bytes) at next level for any&#xa;    // file at a level &gt;= 1.&#xa;    int64_t TEST_MaxNextLevelOverlappingBytes();&#xa;    // Record a sample of bytes read at the specified internal key.&#xa;    // Samples are taken approximately once every config::kReadBytesPeriod&#xa;    // bytes.&#xa;    void RecordReadSample(Slice key);&#xa;  private:&#xa;    friend class DB;&#xa;    struct CompactionState;&#xa;    struct Writer;&#xa;    Iterator *NewInternalIterator(const ReadOptions &amp;,&#xa;                                  SequenceNumber *latest_snapshot,&#xa;                                  uint32_t *seed);&#xa;    Status NewDB();&#xa;    // Recover the descriptor from persistent storage.  May do a significant&#xa;    // amount of work to recover recently logged updates.  Any changes to&#xa;    // be made to the descriptor are added to *edit.&#xa;    Status Recover(VersionEdit *edit, bool *save_manifest)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    void MaybeIgnoreError(Status *s) const;&#xa;    // Delete any unneeded files and stale in-memory entries.&#xa;    void DeleteObsoleteFiles();&#xa;    // Compact the in-memory write buffer to disk.  Switches to a new&#xa;    // log-file/memtable and writes a new descriptor iff successful.&#xa;    // Errors are recorded in bg_error_.&#xa;    void CompactMemTable() EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    Status RecoverLogFile(uint64_t log_number, bool last_log, bool *save_manifest,&#xa;                          VersionEdit *edit, SequenceNumber *max_sequence)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    Status WriteLevel0Table(MemTable *mem, VersionEdit *edit, Version *base)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    Status MakeRoomForWrite(bool force /* compact even if there is room? */)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    WriteBatch *BuildBatchGroup(Writer **last_writer);&#xa;    void RecordBackgroundError(const Status &amp;s);&#xa;    void MaybeScheduleCompaction() EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    static void BGWork(void *db);&#xa;    void BackgroundCall();&#xa;    void BackgroundCompaction() EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    void CleanupCompaction(CompactionState *compact)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    Status DoCompactionWork(CompactionState *compact)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    Status OpenCompactionOutputFile(CompactionState *compact);&#xa;    Status FinishCompactionOutputFile(CompactionState *compact, Iterator *input);&#xa;    Status InstallCompactionResults(CompactionState *compact)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mutex_);&#xa;    // Constant after construction&#xa;    Env *const env_;&#xa;    const InternalKeyComparator internal_comparator_;&#xa;    const InternalFilterPolicy internal_filter_policy_;&#xa;    const Options options_; // options_.comparator == &amp;internal_comparator_&#xa;    bool owns_info_log_;&#xa;    bool owns_cache_;&#xa;    const std::string dbname_;&#xa;    // table_cache_ provides its own synchronization&#xa;    TableCache *table_cache_;&#xa;    // Lock over the persistent DB state.  Non-NULL iff successfully acquired.&#xa;    FileLock *db_lock_;&#xa;    // State below is protected by mutex_&#xa;    port::Mutex mutex_;&#xa;    port::AtomicPointer shutting_down_;&#xa;    port::CondVar bg_cv_; // Signalled when background work finishes&#xa;    MemTable *mem_;&#xa;    MemTable *imm_;               // Memtable being compacted&#xa;    port::AtomicPointer has_imm_; // So bg thread can detect non-NULL imm_&#xa;    WritableFile *logfile_;&#xa;    uint64_t logfile_number_;&#xa;    log::Writer *log_;&#xa;    uint32_t seed_; // For sampling.&#xa;    // Queue of writers.&#xa;    std::deque&lt;Writer *&gt; writers_;&#xa;    WriteBatch *tmp_batch_;&#xa;    SnapshotList snapshots_;&#xa;    // Set of table files to protect from deletion because they are&#xa;    // part of ongoing compactions.&#xa;    std::set&lt;uint64_t&gt; pending_outputs_;&#xa;    // Has a background compaction been scheduled or is running?&#xa;    bool bg_compaction_scheduled_;&#xa;    // Information for a manual compaction&#xa;    struct ManualCompaction&#xa;    {&#xa;      int level;&#xa;      bool done;&#xa;      const InternalKey *begin; // NULL means beginning of key range&#xa;      const InternalKey *end;   // NULL means end of key range&#xa;      InternalKey tmp_storage;  // Used to keep track of compaction progress&#xa;    };&#xa;    ManualCompaction *manual_compaction_;&#xa;    VersionSet *versions_;&#xa;    // Have we encountered a background error in paranoid mode?&#xa;    Status bg_error_;&#xa;    // Per level compaction stats.  stats_[level] stores the stats for&#xa;    // compactions that produced data for the specified &quot;level&quot;.&#xa;    struct CompactionStats&#xa;    {&#xa;      int64_t micros;&#xa;      int64_t bytes_read;&#xa;      int64_t bytes_written;&#xa;      CompactionStats() : micros(0), bytes_read(0), bytes_written(0) {}&#xa;      void Add(const CompactionStats &amp;c)&#xa;      {&#xa;        this-&gt;micros += c.micros;&#xa;        this-&gt;bytes_read += c.bytes_read;&#xa;        this-&gt;bytes_written += c.bytes_written;&#xa;      }&#xa;    };&#xa;    CompactionStats stats_[config::kNumLevels];&#xa;    // No copying allowed&#xa;    DBImpl(const DBImpl &amp;);&#xa;    void operator=(const DBImpl &amp;);&#xa;    const Comparator *user_comparator() const&#xa;    {&#xa;      return internal_comparator_.user_comparator();&#xa;    }&#xa;  };" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-23" vertex="1">
          <mxGeometry y="30" width="437" height="2040" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-29" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" source="UuF3cB1NPZclrfG2085--36" target="ToC9YKNpf1hCUuCHKTob-28" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-34" value="dbformat.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="-413" y="1391" width="453" height="519" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-37" value="class InternalKeyComparator : public Comparator {&#xa; private:&#xa;  const Comparator* user_comparator_;&#xa; public:&#xa;  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }&#xa;  virtual const char* Name() const;&#xa;  virtual int Compare(const Slice&amp; a, const Slice&amp; b) const;&#xa;  virtual void FindShortestSeparator(&#xa;      std::string* start,&#xa;      const Slice&amp; limit) const;&#xa;  virtual void FindShortSuccessor(std::string* key) const;&#xa;  const Comparator* user_comparator() const { return user_comparator_; }&#xa;  int Compare(const InternalKey&amp; a, const InternalKey&amp; b) const;&#xa;};" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-34" vertex="1">
          <mxGeometry y="30" width="453" height="255" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-44" value="inline int InternalKeyComparator::Compare(&#xa;    const InternalKey&amp; a, const InternalKey&amp; b) const {&#xa;  return Compare(a.Encode(), b.Encode());&#xa;}" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-34" vertex="1">
          <mxGeometry y="285" width="453" height="68" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-1" value="class InternalFilterPolicy : public FilterPolicy&#xa;  {&#xa;  private:&#xa;    const FilterPolicy *const user_policy_;&#xa;  public:&#xa;    explicit InternalFilterPolicy(const FilterPolicy *p) : user_policy_(p) {}&#xa;    virtual const char *Name() const;&#xa;    virtual void CreateFilter(const Slice *keys, int n, std::string *dst) const;&#xa;    virtual bool KeyMayMatch(const Slice &amp;key, const Slice &amp;filter) const;&#xa;  };" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-34" vertex="1">
          <mxGeometry y="353" width="453" height="166" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-38" value="dbformat.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="200" y="2204" width="505" height="1248" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-39" value="const char* InternalKeyComparator::Name() const {&#xa;  return &quot;leveldb.InternalKeyComparator&quot;;&#xa;}" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="30" width="505" height="66" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-40" value="int InternalKeyComparator::Compare(const Slice&amp; akey, const Slice&amp; bkey) const {&#xa;  // Order by:&#xa;  //    increasing user key (according to user-supplied comparator)&#xa;  //    decreasing sequence number&#xa;  //    decreasing type (though sequence# should be enough to disambiguate)&#xa;  int r = user_comparator_-&gt;Compare(ExtractUserKey(akey), ExtractUserKey(bkey));&#xa;  if (r == 0) {&#xa;    const uint64_t anum = DecodeFixed64(akey.data() + akey.size() - 8);&#xa;    const uint64_t bnum = DecodeFixed64(bkey.data() + bkey.size() - 8);&#xa;    if (anum &gt; bnum) {&#xa;      r = -1;&#xa;    } else if (anum &lt; bnum) {&#xa;      r = +1;&#xa;    }&#xa;  }&#xa;  return r;&#xa;}" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="96" width="505" height="252" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-41" value="void InternalKeyComparator::FindShortestSeparator(&#xa;      std::string* start,&#xa;      const Slice&amp; limit) const {&#xa;  // Attempt to shorten the user portion of the key&#xa;  Slice user_start = ExtractUserKey(*start);&#xa;  Slice user_limit = ExtractUserKey(limit);&#xa;  std::string tmp(user_start.data(), user_start.size());&#xa;  user_comparator_-&gt;FindShortestSeparator(&amp;tmp, user_limit);&#xa;  if (tmp.size() &lt; user_start.size() &amp;&amp;&#xa;      user_comparator_-&gt;Compare(user_start, tmp) &lt; 0) {&#xa;    // User key has become shorter physically, but larger logically.&#xa;    // Tack on the earliest possible number to the shortened user key.&#xa;    PutFixed64(&amp;tmp, PackSequenceAndType(kMaxSequenceNumber,kValueTypeForSeek));&#xa;    assert(this-&gt;Compare(*start, tmp) &lt; 0);&#xa;    assert(this-&gt;Compare(tmp, limit) &lt; 0);&#xa;    start-&gt;swap(tmp);&#xa;  }&#xa;}" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="348" width="505" height="269" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-42" value="void InternalKeyComparator::FindShortSuccessor(std::string* key) const {&#xa;  Slice user_key = ExtractUserKey(*key);&#xa;  std::string tmp(user_key.data(), user_key.size());&#xa;  user_comparator_-&gt;FindShortSuccessor(&amp;tmp);&#xa;  if (tmp.size() &lt; user_key.size() &amp;&amp;&#xa;      user_comparator_-&gt;Compare(user_key, tmp) &lt; 0) {&#xa;    // User key has become shorter physically, but larger logically.&#xa;    // Tack on the earliest possible number to the shortened user key.&#xa;    PutFixed64(&amp;tmp, PackSequenceAndType(kMaxSequenceNumber,kValueTypeForSeek));&#xa;    assert(this-&gt;Compare(*key, tmp) &lt; 0);&#xa;    key-&gt;swap(tmp);&#xa;  }&#xa;}" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="617" width="505" height="269" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-43" value="  const char *InternalFilterPolicy::Name() const&#xa;  {&#xa;    return user_policy_-&gt;Name();&#xa;  }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="886" width="505" height="73" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-4" value="  void InternalFilterPolicy::CreateFilter(const Slice *keys, int n,&#xa;                                          std::string *dst) const&#xa;  {&#xa;    // We rely on the fact that the code in table.cc does not mind us&#xa;    // adjusting keys[].&#xa;    Slice *mkey = const_cast&lt;Slice *&gt;(keys);&#xa;    for (int i = 0; i &lt; n; i++)&#xa;    {&#xa;      mkey[i] = ExtractUserKey(keys[i]);&#xa;      // TODO(sanjay): Suppress dups?&#xa;    }&#xa;    user_policy_-&gt;CreateFilter(keys, n, dst);&#xa;  }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="959" width="505" height="211" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-6" value="  bool InternalFilterPolicy::KeyMayMatch(const Slice &amp;key, const Slice &amp;f) const&#xa;  {&#xa;    return user_policy_-&gt;KeyMayMatch(ExtractUserKey(key), f);&#xa;  }" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="ToC9YKNpf1hCUuCHKTob-38" vertex="1">
          <mxGeometry y="1170" width="505" height="78" as="geometry" />
        </mxCell>
        <mxCell id="ToC9YKNpf1hCUuCHKTob-46" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;fontColor=#393C56;strokeColor=#006EAF;fillColor=#1ba1e2;" parent="1" source="ToC9YKNpf1hCUuCHKTob-25" target="ToC9YKNpf1hCUuCHKTob-37" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-2" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" source="ToC9YKNpf1hCUuCHKTob-25" target="KjjygEA-8G5yH3GOAMU8-1" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" source="KjjygEA-8G5yH3GOAMU8-1" target="ToC9YKNpf1hCUuCHKTob-43" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="40" y="1871" />
              <mxPoint x="95" y="1871" />
              <mxPoint x="95" y="2685" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-5" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" source="KjjygEA-8G5yH3GOAMU8-1" target="KjjygEA-8G5yH3GOAMU8-4" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="40" y="1881" />
              <mxPoint x="95" y="1881" />
              <mxPoint x="95" y="2827" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-7" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" source="KjjygEA-8G5yH3GOAMU8-1" target="KjjygEA-8G5yH3GOAMU8-6" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="40" y="1891" />
              <mxPoint x="95" y="1891" />
              <mxPoint x="95" y="2971" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-8" target="ToC9YKNpf1hCUuCHKTob-30" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="1340" y="1499" />
              <mxPoint x="1340" y="642" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-16" value="cache.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1363" y="282" width="486" height="3359" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-61" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1.008;entryY=0.221;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#6a00ff;strokeColor=#3700CC;" parent="KjjygEA-8G5yH3GOAMU8-16" source="KjjygEA-8G5yH3GOAMU8-17" target="KjjygEA-8G5yH3GOAMU8-18" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="607" y="66" />
              <mxPoint x="607" y="327" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-17" value="Cache *NewLRUCache(size_t capacity)&#xa;  {&#xa;    return new ShardedLRUCache(capacity);&#xa;  }" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-16" vertex="1">
          <mxGeometry y="30" width="486" height="73" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-29" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.276;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="KjjygEA-8G5yH3GOAMU8-16" source="KjjygEA-8G5yH3GOAMU8-18" target="KjjygEA-8G5yH3GOAMU8-20" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="643" y="611" />
              <mxPoint x="643" y="1279" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-18" value="class ShardedLRUCache : public Cache&#xa;    {&#xa;    private:&#xa;      LRUCache shard_[kNumShards];&#xa;      port::Mutex id_mutex_;&#xa;      uint64_t last_id_;&#xa;      static inline uint32_t HashSlice(const Slice &amp;s)&#xa;      {&#xa;        return Hash(s.data(), s.size(), 0);&#xa;      }&#xa;      static uint32_t Shard(uint32_t hash)&#xa;      {&#xa;        return hash &gt;&gt; (32 - kNumShardBits);&#xa;      }&#xa;    public:&#xa;      explicit ShardedLRUCache(size_t capacity)&#xa;          : last_id_(0)&#xa;      {&#xa;        const size_t per_shard = (capacity + (kNumShards - 1)) / kNumShards; // 524288&#xa;        for (int s = 0; s &lt; kNumShards; s++)&#xa;        {&#xa;          shard_[s].SetCapacity(per_shard);&#xa;        }&#xa;      }&#xa;      virtual ~ShardedLRUCache() {}&#xa;      virtual Handle *Insert(const Slice &amp;key, void *value, size_t charge,&#xa;                             void (*deleter)(const Slice &amp;key, void *value))&#xa;      {&#xa;        const uint32_t hash = HashSlice(key);&#xa;        return shard_[Shard(hash)].Insert(key, hash, value, charge, deleter);&#xa;      }&#xa;      virtual Handle *Lookup(const Slice &amp;key)&#xa;      {&#xa;        const uint32_t hash = HashSlice(key);&#xa;        return shard_[Shard(hash)].Lookup(key, hash);&#xa;      }&#xa;      virtual void Release(Handle *handle)&#xa;      {&#xa;        LRUHandle *h = reinterpret_cast&lt;LRUHandle *&gt;(handle);&#xa;        shard_[Shard(h-&gt;hash)].Release(handle);&#xa;      }&#xa;      virtual void Erase(const Slice &amp;key)&#xa;      {&#xa;        const uint32_t hash = HashSlice(key);&#xa;        shard_[Shard(hash)].Erase(key, hash);&#xa;      }&#xa;      virtual void *Value(Handle *handle)&#xa;      {&#xa;        return reinterpret_cast&lt;LRUHandle *&gt;(handle)-&gt;value;&#xa;      }&#xa;      virtual uint64_t NewId()&#xa;      {&#xa;        MutexLock l(&amp;id_mutex_);&#xa;        return ++(last_id_);&#xa;      }&#xa;      virtual void Prune()&#xa;      {&#xa;        for (int s = 0; s &lt; kNumShards; s++)&#xa;        {&#xa;          shard_[s].Prune();&#xa;        }&#xa;      }&#xa;      virtual size_t TotalCharge() const&#xa;      {&#xa;        size_t total = 0;&#xa;        for (int s = 0; s &lt; kNumShards; s++)&#xa;        {&#xa;          total += shard_[s].TotalCharge();&#xa;        }&#xa;        return total;&#xa;      }&#xa;    };" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-16" vertex="1">
          <mxGeometry y="103" width="486" height="1015" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-40" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fillColor=#6a00ff;strokeColor=#3700CC;" parent="KjjygEA-8G5yH3GOAMU8-16" source="KjjygEA-8G5yH3GOAMU8-20" target="KjjygEA-8G5yH3GOAMU8-30" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-42" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=-0.001;entryY=0.045;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#6a00ff;strokeColor=#3700CC;" parent="KjjygEA-8G5yH3GOAMU8-16" source="KjjygEA-8G5yH3GOAMU8-20" target="KjjygEA-8G5yH3GOAMU8-37" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-20" value="class LRUCache&#xa;    {&#xa;    public:&#xa;      LRUCache();&#xa;      ~LRUCache();&#xa;      // Separate from constructor so caller can easily make an array of LRUCache&#xa;      void SetCapacity(size_t capacity) { capacity_ = capacity; }&#xa;      // Like Cache methods, but with an extra &quot;hash&quot; parameter.&#xa;      Cache::Handle *Insert(const Slice &amp;key, uint32_t hash,&#xa;                            void *value, size_t charge,&#xa;                            void (*deleter)(const Slice &amp;key, void *value));&#xa;      Cache::Handle *Lookup(const Slice &amp;key, uint32_t hash);&#xa;      void Release(Cache::Handle *handle);&#xa;      void Erase(const Slice &amp;key, uint32_t hash);&#xa;      void Prune(); //删除减少、和上面那个有区别？&#xa;      size_t TotalCharge() const&#xa;      {&#xa;        MutexLock l(&amp;mutex_);&#xa;        return usage_;&#xa;      }&#xa;    private:&#xa;      void LRU_Remove(LRUHandle *e);&#xa;      void LRU_Append(LRUHandle *list, LRUHandle *e);&#xa;      void Ref(LRUHandle *e);&#xa;      void Unref(LRUHandle *e);&#xa;      bool FinishErase(LRUHandle *e);&#xa;      // Initialized before use.&#xa;      size_t capacity_;&#xa;      // mutex_ protects the following state.&#xa;      mutable port::Mutex mutex_;&#xa;      size_t usage_;&#xa;      // Dummy head of LRU list.&#xa;      // lru.prev is newest entry, lru.next is oldest entry.&#xa;      // Entries have refs==1 and in_cache==true.&#xa;      LRUHandle lru_;&#xa;      // Dummy head of in-use list.&#xa;      // Entries are in use by clients, and have refs &gt;= 2 and in_cache==true.&#xa;      LRUHandle in_use_;&#xa;      HandleTable table_;&#xa;    };" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-16" vertex="1">
          <mxGeometry y="1118" width="486" height="583" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-30" value="struct LRUHandle&#xa;    {&#xa;      void *value;&#xa;      void (*deleter)(const Slice &amp;, void *value);&#xa;      LRUHandle *next_hash;&#xa;      LRUHandle *next;&#xa;      LRUHandle *prev;&#xa;      size_t charge; // TODO(opt): Only allow uint32_t?&#xa;      size_t key_length;&#xa;      bool in_cache;    // Whether entry is in the cache.&#xa;      uint32_t refs;    // References, including cache reference, if present.&#xa;      uint32_t hash;    // Hash of key(); used for fast sharding and comparisons&#xa;      char key_data[1]; // Beginning of key&#xa;      Slice key() const&#xa;      {&#xa;        // For cheaper lookups, we allow a temporary Handle object&#xa;        // to store a pointer to a key in &quot;value&quot;.&#xa;        if (next == this)&#xa;        {&#xa;          return *(reinterpret_cast&lt;Slice *&gt;(value));&#xa;        }&#xa;        else&#xa;        {&#xa;          return Slice(key_data, key_length);&#xa;        }&#xa;      }&#xa;    };" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-16" vertex="1">
          <mxGeometry y="1701" width="486" height="398" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-37" value="class HandleTable&#xa;    {&#xa;    public:&#xa;      HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }&#xa;      ~HandleTable() { delete[] list_; }&#xa;      LRUHandle *Lookup(const Slice &amp;key, uint32_t hash)&#xa;      {&#xa;        return *FindPointer(key, hash);&#xa;      }&#xa;      LRUHandle *Insert(LRUHandle *h)&#xa;      {&#xa;        LRUHandle **ptr = FindPointer(h-&gt;key(), h-&gt;hash);&#xa;        LRUHandle *old = *ptr;&#xa;        h-&gt;next_hash = (old == NULL ? NULL : old-&gt;next_hash);&#xa;        *ptr = h;&#xa;        if (old == NULL)&#xa;        {&#xa;          ++elems_;&#xa;          if (elems_ &gt; length_)&#xa;          {&#xa;            // Since each cache entry is fairly large, we aim for a small&#xa;            // average linked list length (&lt;= 1).&#xa;            Resize();&#xa;          }&#xa;        }&#xa;        return old;&#xa;      }&#xa;      LRUHandle *Remove(const Slice &amp;key, uint32_t hash)&#xa;      {&#xa;        LRUHandle **ptr = FindPointer(key, hash);&#xa;        LRUHandle *result = *ptr;&#xa;        if (result != NULL)&#xa;        {&#xa;          *ptr = result-&gt;next_hash;&#xa;          --elems_;&#xa;        }&#xa;        return result;&#xa;      }&#xa;    private:&#xa;      // The table consists of an array of buckets where each bucket is&#xa;      // a linked list of cache entries that hash into the bucket.&#xa;      uint32_t length_;&#xa;      uint32_t elems_;&#xa;      LRUHandle **list_;&#xa;      // Return a pointer to slot that points to a cache entry that&#xa;      // matches key/hash.  If there is no such cache entry, return a&#xa;      // pointer to the trailing slot in the corresponding linked list.&#xa;      LRUHandle **FindPointer(const Slice &amp;key, uint32_t hash)&#xa;      {&#xa;        LRUHandle **ptr = &amp;list_[hash &amp; (length_ - 1)];&#xa;        while (*ptr != NULL &amp;&amp;&#xa;               ((*ptr)-&gt;hash != hash || key != (*ptr)-&gt;key()))&#xa;        {&#xa;          ptr = &amp;(*ptr)-&gt;next_hash;&#xa;        }&#xa;        return ptr;&#xa;      }&#xa;      void Resize()&#xa;      {&#xa;        uint32_t new_length = 4;&#xa;        while (new_length &lt; elems_)&#xa;        {&#xa;          new_length *= 2;&#xa;        }&#xa;        LRUHandle **new_list = new LRUHandle *[new_length];&#xa;        memset(new_list, 0, sizeof(new_list[0]) * new_length);&#xa;        uint32_t count = 0;&#xa;        for (uint32_t i = 0; i &lt; length_; i++)&#xa;        {&#xa;          LRUHandle *h = list_[i];&#xa;          while (h != NULL)&#xa;          {&#xa;            LRUHandle *next = h-&gt;next_hash;&#xa;            uint32_t hash = h-&gt;hash;&#xa;            LRUHandle **ptr = &amp;new_list[hash &amp; (new_length - 1)];&#xa;            h-&gt;next_hash = *ptr;&#xa;            *ptr = h;&#xa;            h = next;&#xa;            count++;&#xa;          }&#xa;        }&#xa;        assert(elems_ == count);&#xa;        delete[] list_;&#xa;        list_ = new_list;&#xa;        length_ = new_length;&#xa;      }&#xa;    };" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-16" vertex="1">
          <mxGeometry y="2099" width="486" height="1260" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-19" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fillColor=#6a00ff;strokeColor=#3700CC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-18" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="1433" y="159" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-23" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-8" target="KjjygEA-8G5yH3GOAMU8-17" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="1285" y="1499" />
              <mxPoint x="1285" y="348" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-24" value="port_posix.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1752" y="-1272" width="486" height="976" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-25" value="namespace leveldb {&#xa;namespace port {&#xa;static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;&#xa;#undef PLATFORM_IS_LITTLE_ENDIAN&#xa;class CondVar;&#xa;class Mutex {&#xa; public:&#xa;  Mutex();&#xa;  ~Mutex();&#xa;  void Lock();&#xa;  void Unlock();&#xa;  void AssertHeld() { }&#xa; private:&#xa;  friend class CondVar;&#xa;  pthread_mutex_t mu_;&#xa;  // No copying&#xa;  Mutex(const Mutex&amp;);&#xa;  void operator=(const Mutex&amp;);&#xa;};&#xa;class CondVar {&#xa; public:&#xa;  explicit CondVar(Mutex* mu);&#xa;  ~CondVar();&#xa;  void Wait();&#xa;  void Signal();&#xa;  void SignalAll();&#xa; private:&#xa;  pthread_cond_t cv_;&#xa;  Mutex* mu_;&#xa;};&#xa;typedef pthread_once_t OnceType;&#xa;#define LEVELDB_ONCE_INIT PTHREAD_ONCE_INIT&#xa;extern void InitOnce(OnceType* once, void (*initializer)());&#xa;inline bool Snappy_Compress(const char* input, size_t length,&#xa;                            ::std::string* output) {&#xa;#ifdef SNAPPY&#xa;  output-&gt;resize(snappy::MaxCompressedLength(length));&#xa;  size_t outlen;&#xa;  snappy::RawCompress(input, length, &amp;(*output)[0], &amp;outlen);&#xa;  output-&gt;resize(outlen);&#xa;  return true;&#xa;#endif&#xa;  return false;&#xa;}&#xa;inline bool Snappy_GetUncompressedLength(const char* input, size_t length,&#xa;                                         size_t* result) {&#xa;#ifdef SNAPPY&#xa;  return snappy::GetUncompressedLength(input, length, result);&#xa;#else&#xa;  return false;&#xa;#endif&#xa;}&#xa;inline bool Snappy_Uncompress(const char* input, size_t length,&#xa;                              char* output) {&#xa;#ifdef SNAPPY&#xa;  return snappy::RawUncompress(input, length, output);&#xa;#else&#xa;  return false;&#xa;#endif&#xa;}&#xa;inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {&#xa;  return false;&#xa;}&#xa;uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size);&#xa;} // namespace port&#xa;} // namespace leveldb" style="text;strokeColor=#E07A5F;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-24" vertex="1">
          <mxGeometry y="30" width="486" height="946" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-26" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="UuF3cB1NPZclrfG2085--25" target="KjjygEA-8G5yH3GOAMU8-25" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-27" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.953;entryY=0.999;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-20" target="KjjygEA-8G5yH3GOAMU8-25" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-28" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.823;entryY=1;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-18" target="KjjygEA-8G5yH3GOAMU8-25" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-45" value="atomic_pointer.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="778" y="2458" width="437" height="387" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-46" value="#if defined(LEVELDB_HAVE_MEMORY_BARRIER) //默认是使用这个class AtomicPointer&#xa;    class AtomicPointer&#xa;    {&#xa;    private:&#xa;      void *rep_;&#xa;    public:&#xa;      AtomicPointer() {}&#xa;      explicit AtomicPointer(void *p) : rep_(p) {}&#xa;      inline void *NoBarrier_Load() const { return rep_; }&#xa;      inline void NoBarrier_Store(void *v) { rep_ = v; }&#xa;      inline void *Acquire_Load() const&#xa;      {&#xa;        void *result = rep_;&#xa;        MemoryBarrier();&#xa;        return result;&#xa;      }&#xa;      inline void Release_Store(void *v)&#xa;      {&#xa;        MemoryBarrier(); //内存屏障&#xa;        rep_ = v;&#xa;      }&#xa;    };" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-45" vertex="1">
          <mxGeometry y="30" width="437" height="357" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-48" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" source="ToC9YKNpf1hCUuCHKTob-25" target="KjjygEA-8G5yH3GOAMU8-46" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="135" y="1070" />
              <mxPoint x="135" y="2546" />
              <mxPoint x="778" y="2546" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-49" value="table_cache.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="775" y="2975" width="444" height="517" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-50" value="  class TableCache&#xa;  {&#xa;  public:&#xa;    TableCache(const std::string &amp;dbname, const Options *options, int entries);&#xa;    ~TableCache();&#xa;    // Return an iterator for the specified file number (the corresponding&#xa;    // file length must be exactly &quot;file_size&quot; bytes).  If &quot;tableptr&quot; is&#xa;    // non-NULL, also sets &quot;*tableptr&quot; to point to the Table object&#xa;    // underlying the returned iterator, or NULL if no Table object underlies&#xa;    // the returned iterator.  The returned &quot;*tableptr&quot; object is owned by&#xa;    // the cache and should not be deleted, and is valid for as long as the&#xa;    // returned iterator is live.&#xa;    Iterator *NewIterator(const ReadOptions &amp;options,&#xa;                          uint64_t file_number,&#xa;                          uint64_t file_size,&#xa;                          Table **tableptr = NULL);&#xa;    // If a seek to internal key &quot;k&quot; in specified file finds an entry,&#xa;    // call (*handle_result)(arg, found_key, found_value).&#xa;    Status Get(const ReadOptions &amp;options,&#xa;               uint64_t file_number,&#xa;               uint64_t file_size,&#xa;               const Slice &amp;k,&#xa;               void *arg,&#xa;               void (*handle_result)(void *, const Slice &amp;, const Slice &amp;));&#xa;    // Evict any entry for the specified file number&#xa;    void Evict(uint64_t file_number);&#xa;  private:&#xa;    Env *const env_;&#xa;    const std::string dbname_;&#xa;    const Options *options_;&#xa;    Cache *cache_;&#xa;    Status FindTable(uint64_t file_number, uint64_t file_size, Cache::Handle **);&#xa;  };" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-49" vertex="1">
          <mxGeometry y="30" width="444" height="487" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-55" value="version_set.h" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="200" y="3604" width="444" height="1867" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-56" value="class VersionSet&#xa;  {&#xa;  public:&#xa;    VersionSet(const std::string &amp;dbname,&#xa;               const Options *options,&#xa;               TableCache *table_cache,&#xa;               const InternalKeyComparator *);&#xa;    ~VersionSet();&#xa;    // Apply *edit to the current version to form a new descriptor that&#xa;    // is both saved to persistent state and installed as the new&#xa;    // current version.  Will release *mu while actually writing to the file.&#xa;    // REQUIRES: *mu is held on entry.&#xa;    // REQUIRES: no other thread concurrently calls LogAndApply()&#xa;    Status LogAndApply(VersionEdit *edit, port::Mutex *mu)&#xa;        EXCLUSIVE_LOCKS_REQUIRED(mu);&#xa;    // Recover the last saved descriptor from persistent storage.&#xa;    Status Recover(bool *save_manifest);&#xa;    // Return the current version.&#xa;    Version *current() const { return current_; }&#xa;    // Return the current manifest file number&#xa;    uint64_t ManifestFileNumber() const { return manifest_file_number_; }&#xa;    // Allocate and return a new file number&#xa;    uint64_t NewFileNumber() { return next_file_number_++; }&#xa;    // Arrange to reuse &quot;file_number&quot; unless a newer file number has&#xa;    // already been allocated.&#xa;    // REQUIRES: &quot;file_number&quot; was returned by a call to NewFileNumber().&#xa;    void ReuseFileNumber(uint64_t file_number)&#xa;    {&#xa;      if (next_file_number_ == file_number + 1)&#xa;      {&#xa;        next_file_number_ = file_number;&#xa;      }&#xa;    }&#xa;    // Return the number of Table files at the specified level.&#xa;    int NumLevelFiles(int level) const;&#xa;    // Return the combined file size of all files at the specified level.&#xa;    int64_t NumLevelBytes(int level) const;&#xa;    // Return the last sequence number.&#xa;    uint64_t LastSequence() const { return last_sequence_; }&#xa;    // Set the last sequence number to s.&#xa;    void SetLastSequence(uint64_t s)&#xa;    {&#xa;      assert(s &gt;= last_sequence_);&#xa;      last_sequence_ = s;&#xa;    }&#xa;    // Mark the specified file number as used.&#xa;    void MarkFileNumberUsed(uint64_t number);&#xa;    // Return the current log file number.&#xa;    uint64_t LogNumber() const { return log_number_; }&#xa;    // Return the log file number for the log file that is currently&#xa;    // being compacted, or zero if there is no such log file.&#xa;    uint64_t PrevLogNumber() const { return prev_log_number_; }&#xa;    // Pick level and inputs for a new compaction.&#xa;    // Returns NULL if there is no compaction to be done.&#xa;    // Otherwise returns a pointer to a heap-allocated object that&#xa;    // describes the compaction.  Caller should delete the result.&#xa;    Compaction *PickCompaction();&#xa;    // Return a compaction object for compacting the range [begin,end] in&#xa;    // the specified level.  Returns NULL if there is nothing in that&#xa;    // level that overlaps the specified range.  Caller should delete&#xa;    // the result.&#xa;    Compaction *CompactRange(&#xa;        int level,&#xa;        const InternalKey *begin,&#xa;        const InternalKey *end);&#xa;    // Return the maximum overlapping data (in bytes) at next level for any&#xa;    // file at a level &gt;= 1.&#xa;    int64_t MaxNextLevelOverlappingBytes();&#xa;    // Create an iterator that reads over the compaction inputs for &quot;*c&quot;.&#xa;    // The caller should delete the iterator when no longer needed.&#xa;    Iterator *MakeInputIterator(Compaction *c);&#xa;    // Returns true iff some level needs a compaction.&#xa;    bool NeedsCompaction() const&#xa;    {&#xa;      Version *v = current_;&#xa;      return (v-&gt;compaction_score_ &gt;= 1) || (v-&gt;file_to_compact_ != NULL);&#xa;    }&#xa;    // Add all files listed in any live version to *live.&#xa;    // May also mutate some internal state.&#xa;    void AddLiveFiles(std::set&lt;uint64_t&gt; *live);&#xa;    // Return the approximate offset in the database of the data for&#xa;    // &quot;key&quot; as of version &quot;v&quot;.&#xa;    uint64_t ApproximateOffsetOf(Version *v, const InternalKey &amp;key);&#xa;    // Return a human-readable short (single-line) summary of the number&#xa;    // of files per level.  Uses *scratch as backing store.&#xa;    struct LevelSummaryStorage&#xa;    {&#xa;      char buffer[100];&#xa;    };&#xa;    const char *LevelSummary(LevelSummaryStorage *scratch) const;&#xa;  private:&#xa;    class Builder;&#xa;    friend class Compaction;&#xa;    friend class Version;&#xa;    bool ReuseManifest(const std::string &amp;dscname, const std::string &amp;dscbase);&#xa;    void Finalize(Version *v);&#xa;    void GetRange(const std::vector&lt;FileMetaData *&gt; &amp;inputs,&#xa;                  InternalKey *smallest,&#xa;                  InternalKey *largest);&#xa;    void GetRange2(const std::vector&lt;FileMetaData *&gt; &amp;inputs1,&#xa;                   const std::vector&lt;FileMetaData *&gt; &amp;inputs2,&#xa;                   InternalKey *smallest,&#xa;                   InternalKey *largest);&#xa;    void SetupOtherInputs(Compaction *c);&#xa;    // Save current contents to *log&#xa;    Status WriteSnapshot(log::Writer *log);&#xa;    void AppendVersion(Version *v);&#xa;    Env *const env_;&#xa;    const std::string dbname_;&#xa;    const Options *const options_;&#xa;    TableCache *const table_cache_;&#xa;    const InternalKeyComparator icmp_;&#xa;    uint64_t next_file_number_;&#xa;    uint64_t manifest_file_number_;&#xa;    uint64_t last_sequence_;&#xa;    uint64_t log_number_;&#xa;    uint64_t prev_log_number_; // 0 or backing store for memtable being compacted&#xa;    // Opened lazily&#xa;    WritableFile *descriptor_file_;&#xa;    log::Writer *descriptor_log_;&#xa;    Version dummy_versions_; // Head of circular doubly-linked list of versions.&#xa;    Version *current_;       // == dummy_versions_.prev_&#xa;    // Per-level key at which the next compaction at that level should start.&#xa;    // Either an empty string, or a valid InternalKey.&#xa;    std::string compact_pointer_[config::kNumLevels];&#xa;    // No copying allowed&#xa;    VersionSet(const VersionSet &amp;);&#xa;    void operator=(const VersionSet &amp;);&#xa;  };" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-55" vertex="1">
          <mxGeometry y="30" width="444" height="1837" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-57" value="version_set.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="207" y="5655" width="444" height="1867" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-58" value="  class VersionSet::Builder&#xa;  {&#xa;  private:&#xa;    // Helper to sort by v-&gt;files_[file_number].smallest&#xa;    struct BySmallestKey&#xa;    {&#xa;      const InternalKeyComparator *internal_comparator;&#xa;      bool operator()(FileMetaData *f1, FileMetaData *f2) const&#xa;      {&#xa;        int r = internal_comparator-&gt;Compare(f1-&gt;smallest, f2-&gt;smallest);&#xa;        if (r != 0)&#xa;        {&#xa;          return (r &lt; 0);&#xa;        }&#xa;        else&#xa;        {&#xa;          // Break ties by file number&#xa;          return (f1-&gt;number &lt; f2-&gt;number);&#xa;        }&#xa;      }&#xa;    };&#xa;    typedef std::set&lt;FileMetaData *, BySmallestKey&gt; FileSet;&#xa;    struct LevelState&#xa;    {&#xa;      std::set&lt;uint64_t&gt; deleted_files;&#xa;      FileSet *added_files;&#xa;    };&#xa;    VersionSet *vset_;&#xa;    Version *base_;&#xa;    LevelState levels_[config::kNumLevels];&#xa;  public:&#xa;    // Initialize a builder with the files from *base and other info from *vset&#xa;    Builder(VersionSet *vset, Version *base)&#xa;        : vset_(vset),&#xa;          base_(base)&#xa;    {&#xa;      base_-&gt;Ref();&#xa;      BySmallestKey cmp;&#xa;      cmp.internal_comparator = &amp;vset_-&gt;icmp_;&#xa;      for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;      {&#xa;        levels_[level].added_files = new FileSet(cmp);&#xa;      }&#xa;    }&#xa;    ~Builder()&#xa;    {&#xa;      for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;      {&#xa;        const FileSet *added = levels_[level].added_files;&#xa;        std::vector&lt;FileMetaData *&gt; to_unref;&#xa;        to_unref.reserve(added-&gt;size());&#xa;        for (FileSet::const_iterator it = added-&gt;begin();&#xa;             it != added-&gt;end(); ++it)&#xa;        {&#xa;          to_unref.push_back(*it);&#xa;        }&#xa;        delete added;&#xa;        for (uint32_t i = 0; i &lt; to_unref.size(); i++)&#xa;        {&#xa;          FileMetaData *f = to_unref[i];&#xa;          f-&gt;refs--;&#xa;          if (f-&gt;refs &lt;= 0)&#xa;          {&#xa;            delete f;&#xa;          }&#xa;        }&#xa;      }&#xa;      base_-&gt;Unref();&#xa;    }&#xa;    // Apply all of the edits in *edit to the current state.&#xa;    void Apply(VersionEdit *edit)&#xa;    {&#xa;      // Update compaction pointers&#xa;      for (size_t i = 0; i &lt; edit-&gt;compact_pointers_.size(); i++)&#xa;      {&#xa;        const int level = edit-&gt;compact_pointers_[i].first;&#xa;        vset_-&gt;compact_pointer_[level] =&#xa;            edit-&gt;compact_pointers_[i].second.Encode().ToString();&#xa;      }&#xa;      // Delete files&#xa;      const VersionEdit::DeletedFileSet &amp;del = edit-&gt;deleted_files_;&#xa;      for (VersionEdit::DeletedFileSet::const_iterator iter = del.begin();&#xa;           iter != del.end();&#xa;           ++iter)&#xa;      {&#xa;        const int level = iter-&gt;first;&#xa;        const uint64_t number = iter-&gt;second;&#xa;        levels_[level].deleted_files.insert(number);&#xa;      }&#xa;      // Add new files&#xa;      for (size_t i = 0; i &lt; edit-&gt;new_files_.size(); i++)&#xa;      {&#xa;        const int level = edit-&gt;new_files_[i].first;&#xa;        FileMetaData *f = new FileMetaData(edit-&gt;new_files_[i].second);&#xa;        f-&gt;refs = 1;&#xa;        // We arrange to automatically compact this file after&#xa;        // a certain number of seeks.  Let&#39;s assume:&#xa;        //   (1) One seek costs 10ms&#xa;        //   (2) Writing or reading 1MB costs 10ms (100MB/s)&#xa;        //   (3) A compaction of 1MB does 25MB of IO:&#xa;        //         1MB read from this level&#xa;        //         10-12MB read from next level (boundaries may be misaligned)&#xa;        //         10-12MB written to next level&#xa;        // This implies that 25 seeks cost the same as the compaction&#xa;        // of 1MB of data.  I.e., one seek costs approximately the&#xa;        // same as the compaction of 40KB of data.  We are a little&#xa;        // conservative and allow approximately one seek for every 16KB&#xa;        // of data before triggering a compaction.&#xa;        f-&gt;allowed_seeks = (f-&gt;file_size / 16384);&#xa;        if (f-&gt;allowed_seeks &lt; 100)&#xa;          f-&gt;allowed_seeks = 100;&#xa;        levels_[level].deleted_files.erase(f-&gt;number);&#xa;        levels_[level].added_files-&gt;insert(f);&#xa;      }&#xa;    }&#xa;    // Save the current state in *v.&#xa;    void SaveTo(Version *v)&#xa;    {&#xa;      BySmallestKey cmp;&#xa;      cmp.internal_comparator = &amp;vset_-&gt;icmp_;&#xa;      for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;      {&#xa;        // Merge the set of added files with the set of pre-existing files.&#xa;        // Drop any deleted files.  Store the result in *v.&#xa;        const std::vector&lt;FileMetaData *&gt; &amp;base_files = base_-&gt;files_[level];&#xa;        std::vector&lt;FileMetaData *&gt;::const_iterator base_iter = base_files.begin();&#xa;        std::vector&lt;FileMetaData *&gt;::const_iterator base_end = base_files.end();&#xa;        const FileSet *added = levels_[level].added_files;&#xa;        v-&gt;files_[level].reserve(base_files.size() + added-&gt;size());&#xa;        for (FileSet::const_iterator added_iter = added-&gt;begin();&#xa;             added_iter != added-&gt;end();&#xa;             ++added_iter)&#xa;        {&#xa;          // Add all smaller files listed in base_&#xa;          for (std::vector&lt;FileMetaData *&gt;::const_iterator bpos = std::upper_bound(base_iter, base_end, *added_iter, cmp);&#xa;               base_iter != bpos;&#xa;               ++base_iter)&#xa;          {&#xa;            MaybeAddFile(v, level, *base_iter);&#xa;          }&#xa;          MaybeAddFile(v, level, *added_iter);&#xa;        }&#xa;        // Add remaining base files&#xa;        for (; base_iter != base_end; ++base_iter)&#xa;        {&#xa;          MaybeAddFile(v, level, *base_iter);&#xa;        }&#xa;#ifndef NDEBUG&#xa;        // Make sure there is no overlap in levels &gt; 0&#xa;        if (level &gt; 0)&#xa;        {&#xa;          for (uint32_t i = 1; i &lt; v-&gt;files_[level].size(); i++)&#xa;          {&#xa;            const InternalKey &amp;prev_end = v-&gt;files_[level][i - 1]-&gt;largest;&#xa;            const InternalKey &amp;this_begin = v-&gt;files_[level][i]-&gt;smallest;&#xa;            if (vset_-&gt;icmp_.Compare(prev_end, this_begin) &gt;= 0)&#xa;            {&#xa;              fprintf(stderr, &quot;overlapping ranges in same level %s vs. %s\n&quot;,&#xa;                      prev_end.DebugString().c_str(),&#xa;                      this_begin.DebugString().c_str());&#xa;              abort();&#xa;            }&#xa;          }&#xa;        }&#xa;#endif&#xa;      }&#xa;    }&#xa;    void MaybeAddFile(Version *v, int level, FileMetaData *f)&#xa;    {&#xa;      if (levels_[level].deleted_files.count(f-&gt;number) &gt; 0)&#xa;      {&#xa;        // File is deleted: do nothing&#xa;      }&#xa;      else&#xa;      {&#xa;        std::vector&lt;FileMetaData *&gt; *files = &amp;v-&gt;files_[level];&#xa;        if (level &gt; 0 &amp;&amp; !files-&gt;empty())&#xa;        {&#xa;          // Must not overlap&#xa;          assert(vset_-&gt;icmp_.Compare((*files)[files-&gt;size() - 1]-&gt;largest,&#xa;                                      f-&gt;smallest) &lt; 0);&#xa;        }&#xa;        f-&gt;refs++;&#xa;        files-&gt;push_back(f);&#xa;      }&#xa;    }&#xa;  };&#xa;  VersionSet::VersionSet(const std::string &amp;dbname,&#xa;                         const Options *options,&#xa;                         TableCache *table_cache,&#xa;                         const InternalKeyComparator *cmp)&#xa;      : env_(options-&gt;env),&#xa;        dbname_(dbname),&#xa;        options_(options),&#xa;        table_cache_(table_cache),&#xa;        icmp_(*cmp),&#xa;        next_file_number_(2),&#xa;        manifest_file_number_(0), // Filled by Recover()&#xa;        last_sequence_(0),&#xa;        log_number_(0),&#xa;        prev_log_number_(0),&#xa;        descriptor_file_(NULL),&#xa;        descriptor_log_(NULL),&#xa;        dummy_versions_(this),&#xa;        current_(NULL)&#xa;  {&#xa;    AppendVersion(new Version(this));&#xa;  }&#xa;  VersionSet::~VersionSet()&#xa;  {&#xa;    current_-&gt;Unref();&#xa;    assert(dummy_versions_.next_ == &amp;dummy_versions_); // List must be empty&#xa;    delete descriptor_log_;&#xa;    delete descriptor_file_;&#xa;  }&#xa;  void VersionSet::AppendVersion(Version *v)&#xa;  {&#xa;    // Make &quot;v&quot; current&#xa;    assert(v-&gt;refs_ == 0);&#xa;    assert(v != current_);&#xa;    if (current_ != NULL)&#xa;    {&#xa;      current_-&gt;Unref();&#xa;    }&#xa;    current_ = v;&#xa;    v-&gt;Ref();&#xa;    // Append to linked list&#xa;    v-&gt;prev_ = dummy_versions_.prev_;&#xa;    v-&gt;next_ = &amp;dummy_versions_;&#xa;    v-&gt;prev_-&gt;next_ = v;&#xa;    v-&gt;next_-&gt;prev_ = v;&#xa;  }&#xa;  Status VersionSet::LogAndApply(VersionEdit *edit, port::Mutex *mu)&#xa;  {&#xa;    if (edit-&gt;has_log_number_)&#xa;    {&#xa;      assert(edit-&gt;log_number_ &gt;= log_number_);&#xa;      assert(edit-&gt;log_number_ &lt; next_file_number_);&#xa;    }&#xa;    else&#xa;    {&#xa;      edit-&gt;SetLogNumber(log_number_);&#xa;    }&#xa;    if (!edit-&gt;has_prev_log_number_)&#xa;    {&#xa;      edit-&gt;SetPrevLogNumber(prev_log_number_);&#xa;    }&#xa;    edit-&gt;SetNextFile(next_file_number_);&#xa;    edit-&gt;SetLastSequence(last_sequence_);&#xa;    Version *v = new Version(this);&#xa;    {&#xa;      Builder builder(this, current_);&#xa;      builder.Apply(edit);&#xa;      builder.SaveTo(v);&#xa;    }&#xa;    Finalize(v);&#xa;    // Initialize new descriptor log file if necessary by creating&#xa;    // a temporary file that contains a snapshot of the current version.&#xa;    std::string new_manifest_file;&#xa;    Status s;&#xa;    if (descriptor_log_ == NULL)&#xa;    {&#xa;      // No reason to unlock *mu here since we only hit this path in the&#xa;      // first call to LogAndApply (when opening the database).&#xa;      assert(descriptor_file_ == NULL);&#xa;      new_manifest_file = DescriptorFileName(dbname_, manifest_file_number_);&#xa;      edit-&gt;SetNextFile(next_file_number_);&#xa;      s = env_-&gt;NewWritableFile(new_manifest_file, &amp;descriptor_file_);&#xa;      if (s.ok())&#xa;      {&#xa;        descriptor_log_ = new log::Writer(descriptor_file_);&#xa;        s = WriteSnapshot(descriptor_log_);&#xa;      }&#xa;    }&#xa;    // Unlock during expensive MANIFEST log write&#xa;    {&#xa;      mu-&gt;Unlock();&#xa;      // Write new record to MANIFEST log&#xa;      if (s.ok())&#xa;      {&#xa;        std::string record;&#xa;        edit-&gt;EncodeTo(&amp;record);&#xa;        s = descriptor_log_-&gt;AddRecord(record);&#xa;        if (s.ok())&#xa;        {&#xa;          s = descriptor_file_-&gt;Sync();&#xa;        }&#xa;        if (!s.ok())&#xa;        {&#xa;          Log(options_-&gt;info_log, &quot;MANIFEST write: %s\n&quot;, s.ToString().c_str());&#xa;        }&#xa;      }&#xa;      // If we just created a new descriptor file, install it by writing a&#xa;      // new CURRENT file that points to it.&#xa;      if (s.ok() &amp;&amp; !new_manifest_file.empty())&#xa;      {&#xa;        s = SetCurrentFile(env_, dbname_, manifest_file_number_);&#xa;      }&#xa;      mu-&gt;Lock();&#xa;    }&#xa;    // Install the new version&#xa;    if (s.ok())&#xa;    {&#xa;      AppendVersion(v);&#xa;      log_number_ = edit-&gt;log_number_;&#xa;      prev_log_number_ = edit-&gt;prev_log_number_;&#xa;    }&#xa;    else&#xa;    {&#xa;      delete v;&#xa;      if (!new_manifest_file.empty())&#xa;      {&#xa;        delete descriptor_log_;&#xa;        delete descriptor_file_;&#xa;        descriptor_log_ = NULL;&#xa;        descriptor_file_ = NULL;&#xa;        env_-&gt;DeleteFile(new_manifest_file);&#xa;      }&#xa;    }&#xa;    return s;&#xa;  }&#xa;  Status VersionSet::Recover(bool *save_manifest)&#xa;  {&#xa;    struct LogReporter : public log::Reader::Reporter&#xa;    {&#xa;      Status *status;&#xa;      virtual void Corruption(size_t bytes, const Status &amp;s)&#xa;      {&#xa;        if (this-&gt;status-&gt;ok())&#xa;          *this-&gt;status = s;&#xa;      }&#xa;    };&#xa;    // Read &quot;CURRENT&quot; file, which contains a pointer to the current manifest file&#xa;    std::string current;&#xa;    Status s = ReadFileToString(env_, CurrentFileName(dbname_), &amp;current);&#xa;    if (!s.ok())&#xa;    {&#xa;      return s;&#xa;    }&#xa;    if (current.empty() || current[current.size() - 1] != &#39;\n&#39;)&#xa;    {&#xa;      return Status::Corruption(&quot;CURRENT file does not end with newline&quot;);&#xa;    }&#xa;    current.resize(current.size() - 1);&#xa;    std::string dscname = dbname_ + &quot;/&quot; + current;&#xa;    SequentialFile *file;&#xa;    s = env_-&gt;NewSequentialFile(dscname, &amp;file);&#xa;    if (!s.ok())&#xa;    {&#xa;      return s;&#xa;    }&#xa;    bool have_log_number = false;&#xa;    bool have_prev_log_number = false;&#xa;    bool have_next_file = false;&#xa;    bool have_last_sequence = false;&#xa;    uint64_t next_file = 0;&#xa;    uint64_t last_sequence = 0;&#xa;    uint64_t log_number = 0;&#xa;    uint64_t prev_log_number = 0;&#xa;    Builder builder(this, current_);&#xa;    {&#xa;      LogReporter reporter;&#xa;      reporter.status = &amp;s;&#xa;      log::Reader reader(file, &amp;reporter, true /*checksum*/, 0 /*initial_offset*/);&#xa;      Slice record;&#xa;      std::string scratch;&#xa;      while (reader.ReadRecord(&amp;record, &amp;scratch) &amp;&amp; s.ok())&#xa;      {&#xa;        VersionEdit edit;&#xa;        s = edit.DecodeFrom(record);&#xa;        if (s.ok())&#xa;        {&#xa;          if (edit.has_comparator_ &amp;&amp;&#xa;              edit.comparator_ != icmp_.user_comparator()-&gt;Name())&#xa;          {&#xa;            s = Status::InvalidArgument(&#xa;                edit.comparator_ + &quot; does not match existing comparator &quot;,&#xa;                icmp_.user_comparator()-&gt;Name());&#xa;          }&#xa;        }&#xa;        if (s.ok())&#xa;        {&#xa;          builder.Apply(&amp;edit);&#xa;        }&#xa;        if (edit.has_log_number_)&#xa;        {&#xa;          log_number = edit.log_number_;&#xa;          have_log_number = true;&#xa;        }&#xa;        if (edit.has_prev_log_number_)&#xa;        {&#xa;          prev_log_number = edit.prev_log_number_;&#xa;          have_prev_log_number = true;&#xa;        }&#xa;        if (edit.has_next_file_number_)&#xa;        {&#xa;          next_file = edit.next_file_number_;&#xa;          have_next_file = true;&#xa;        }&#xa;        if (edit.has_last_sequence_)&#xa;        {&#xa;          last_sequence = edit.last_sequence_;&#xa;          have_last_sequence = true;&#xa;        }&#xa;      }&#xa;    }&#xa;    delete file;&#xa;    file = NULL;&#xa;    if (s.ok())&#xa;    {&#xa;      if (!have_next_file)&#xa;      {&#xa;        s = Status::Corruption(&quot;no meta-nextfile entry in descriptor&quot;);&#xa;      }&#xa;      else if (!have_log_number)&#xa;      {&#xa;        s = Status::Corruption(&quot;no meta-lognumber entry in descriptor&quot;);&#xa;      }&#xa;      else if (!have_last_sequence)&#xa;      {&#xa;        s = Status::Corruption(&quot;no last-sequence-number entry in descriptor&quot;);&#xa;      }&#xa;      if (!have_prev_log_number)&#xa;      {&#xa;        prev_log_number = 0;&#xa;      }&#xa;      MarkFileNumberUsed(prev_log_number);&#xa;      MarkFileNumberUsed(log_number);&#xa;    }&#xa;    if (s.ok())&#xa;    {&#xa;      Version *v = new Version(this);&#xa;      builder.SaveTo(v);&#xa;      // Install recovered version&#xa;      Finalize(v);&#xa;      AppendVersion(v);&#xa;      manifest_file_number_ = next_file;&#xa;      next_file_number_ = next_file + 1;&#xa;      last_sequence_ = last_sequence;&#xa;      log_number_ = log_number;&#xa;      prev_log_number_ = prev_log_number;&#xa;      // See if we can reuse the existing MANIFEST file.&#xa;      if (ReuseManifest(dscname, current))&#xa;      {&#xa;        // No need to save new manifest&#xa;      }&#xa;      else&#xa;      {&#xa;        *save_manifest = true;&#xa;      }&#xa;    }&#xa;    return s;&#xa;  }&#xa;  bool VersionSet::ReuseManifest(const std::string &amp;dscname,&#xa;                                 const std::string &amp;dscbase)&#xa;  {&#xa;    if (!options_-&gt;reuse_logs)&#xa;    {&#xa;      return false;&#xa;    }&#xa;    FileType manifest_type;&#xa;    uint64_t manifest_number;&#xa;    uint64_t manifest_size;&#xa;    if (!ParseFileName(dscbase, &amp;manifest_number, &amp;manifest_type) ||&#xa;        manifest_type != kDescriptorFile ||&#xa;        !env_-&gt;GetFileSize(dscname, &amp;manifest_size).ok() ||&#xa;        // Make new compacted MANIFEST if old one is too big&#xa;        manifest_size &gt;= TargetFileSize(options_))&#xa;    {&#xa;      return false;&#xa;    }&#xa;    assert(descriptor_file_ == NULL);&#xa;    assert(descriptor_log_ == NULL);&#xa;    Status r = env_-&gt;NewAppendableFile(dscname, &amp;descriptor_file_);&#xa;    if (!r.ok())&#xa;    {&#xa;      Log(options_-&gt;info_log, &quot;Reuse MANIFEST: %s\n&quot;, r.ToString().c_str());&#xa;      assert(descriptor_file_ == NULL);&#xa;      return false;&#xa;    }&#xa;    Log(options_-&gt;info_log, &quot;Reusing MANIFEST %s\n&quot;, dscname.c_str());&#xa;    descriptor_log_ = new log::Writer(descriptor_file_, manifest_size);&#xa;    manifest_file_number_ = manifest_number;&#xa;    return true;&#xa;  }&#xa;  void VersionSet::MarkFileNumberUsed(uint64_t number)&#xa;  {&#xa;    if (next_file_number_ &lt;= number)&#xa;    {&#xa;      next_file_number_ = number + 1;&#xa;    }&#xa;  }&#xa;  void VersionSet::Finalize(Version *v)&#xa;  {&#xa;    // Precomputed best level for next compaction&#xa;    int best_level = -1;&#xa;    double best_score = -1;&#xa;    for (int level = 0; level &lt; config::kNumLevels - 1; level++)&#xa;    {&#xa;      double score;&#xa;      if (level == 0)&#xa;      {&#xa;        // We treat level-0 specially by bounding the number of files&#xa;        // instead of number of bytes for two reasons:&#xa;        //&#xa;        // (1) With larger write-buffer sizes, it is nice not to do too&#xa;        // many level-0 compactions.&#xa;        //&#xa;        // (2) The files in level-0 are merged on every read and&#xa;        // therefore we wish to avoid too many files when the individual&#xa;        // file size is small (perhaps because of a small write-buffer&#xa;        // setting, or very high compression ratios, or lots of&#xa;        // overwrites/deletions).&#xa;        score = v-&gt;files_[level].size() /&#xa;                static_cast&lt;double&gt;(config::kL0_CompactionTrigger);&#xa;      }&#xa;      else&#xa;      {&#xa;        // Compute the ratio of current size to size limit.&#xa;        const uint64_t level_bytes = TotalFileSize(v-&gt;files_[level]);&#xa;        score =&#xa;            static_cast&lt;double&gt;(level_bytes) / MaxBytesForLevel(options_, level);&#xa;      }&#xa;      if (score &gt; best_score)&#xa;      {&#xa;        best_level = level;&#xa;        best_score = score;&#xa;      }&#xa;    }&#xa;    v-&gt;compaction_level_ = best_level;&#xa;    v-&gt;compaction_score_ = best_score;&#xa;  }&#xa;  Status VersionSet::WriteSnapshot(log::Writer *log)&#xa;  {&#xa;    // TODO: Break up into multiple records to reduce memory usage on recovery?&#xa;    // Save metadata&#xa;    VersionEdit edit;&#xa;    edit.SetComparatorName(icmp_.user_comparator()-&gt;Name());&#xa;    // Save compaction pointers&#xa;    for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;    {&#xa;      if (!compact_pointer_[level].empty())&#xa;      {&#xa;        InternalKey key;&#xa;        key.DecodeFrom(compact_pointer_[level]);&#xa;        edit.SetCompactPointer(level, key);&#xa;      }&#xa;    }&#xa;    // Save files&#xa;    for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;    {&#xa;      const std::vector&lt;FileMetaData *&gt; &amp;files = current_-&gt;files_[level];&#xa;      for (size_t i = 0; i &lt; files.size(); i++)&#xa;      {&#xa;        const FileMetaData *f = files[i];&#xa;        edit.AddFile(level, f-&gt;number, f-&gt;file_size, f-&gt;smallest, f-&gt;largest);&#xa;      }&#xa;    }&#xa;    std::string record;&#xa;    edit.EncodeTo(&amp;record);&#xa;    return log-&gt;AddRecord(record);&#xa;  }&#xa;  int VersionSet::NumLevelFiles(int level) const&#xa;  {&#xa;    assert(level &gt;= 0);&#xa;    assert(level &lt; config::kNumLevels);&#xa;    return current_-&gt;files_[level].size();&#xa;  }&#xa;  const char *VersionSet::LevelSummary(LevelSummaryStorage *scratch) const&#xa;  {&#xa;    // Update code if kNumLevels changes&#xa;    assert(config::kNumLevels == 7);&#xa;    snprintf(scratch-&gt;buffer, sizeof(scratch-&gt;buffer),&#xa;             &quot;files[ %d %d %d %d %d %d %d ]&quot;,&#xa;             int(current_-&gt;files_[0].size()),&#xa;             int(current_-&gt;files_[1].size()),&#xa;             int(current_-&gt;files_[2].size()),&#xa;             int(current_-&gt;files_[3].size()),&#xa;             int(current_-&gt;files_[4].size()),&#xa;             int(current_-&gt;files_[5].size()),&#xa;             int(current_-&gt;files_[6].size()));&#xa;    return scratch-&gt;buffer;&#xa;  }&#xa;  uint64_t VersionSet::ApproximateOffsetOf(Version *v, const InternalKey &amp;ikey)&#xa;  {&#xa;    uint64_t result = 0;&#xa;    for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;    {&#xa;      const std::vector&lt;FileMetaData *&gt; &amp;files = v-&gt;files_[level];&#xa;      for (size_t i = 0; i &lt; files.size(); i++)&#xa;      {&#xa;        if (icmp_.Compare(files[i]-&gt;largest, ikey) &lt;= 0)&#xa;        {&#xa;          // Entire file is before &quot;ikey&quot;, so just add the file size&#xa;          result += files[i]-&gt;file_size;&#xa;        }&#xa;        else if (icmp_.Compare(files[i]-&gt;smallest, ikey) &gt; 0)&#xa;        {&#xa;          // Entire file is after &quot;ikey&quot;, so ignore&#xa;          if (level &gt; 0)&#xa;          {&#xa;            // Files other than level 0 are sorted by meta-&gt;smallest, so&#xa;            // no further files in this level will contain data for&#xa;            // &quot;ikey&quot;.&#xa;            break;&#xa;          }&#xa;        }&#xa;        else&#xa;        {&#xa;          // &quot;ikey&quot; falls in the range for this table.  Add the&#xa;          // approximate offset of &quot;ikey&quot; within the table.&#xa;          Table *tableptr;&#xa;          Iterator *iter = table_cache_-&gt;NewIterator(&#xa;              ReadOptions(), files[i]-&gt;number, files[i]-&gt;file_size, &amp;tableptr);&#xa;          if (tableptr != NULL)&#xa;          {&#xa;            result += tableptr-&gt;ApproximateOffsetOf(ikey.Encode());&#xa;          }&#xa;          delete iter;&#xa;        }&#xa;      }&#xa;    }&#xa;    return result;&#xa;  }&#xa;  void VersionSet::AddLiveFiles(std::set&lt;uint64_t&gt; *live)&#xa;  {&#xa;    for (Version *v = dummy_versions_.next_;&#xa;         v != &amp;dummy_versions_;&#xa;         v = v-&gt;next_)&#xa;    {&#xa;      for (int level = 0; level &lt; config::kNumLevels; level++)&#xa;      {&#xa;        const std::vector&lt;FileMetaData *&gt; &amp;files = v-&gt;files_[level];&#xa;        for (size_t i = 0; i &lt; files.size(); i++)&#xa;        {&#xa;          live-&gt;insert(files[i]-&gt;number);&#xa;        }&#xa;      }&#xa;    }&#xa;  }&#xa;  int64_t VersionSet::NumLevelBytes(int level) const&#xa;  {&#xa;    assert(level &gt;= 0);&#xa;    assert(level &lt; config::kNumLevels);&#xa;    return TotalFileSize(current_-&gt;files_[level]);&#xa;  }&#xa;  int64_t VersionSet::MaxNextLevelOverlappingBytes()&#xa;  {&#xa;    int64_t result = 0;&#xa;    std::vector&lt;FileMetaData *&gt; overlaps;&#xa;    for (int level = 1; level &lt; config::kNumLevels - 1; level++)&#xa;    {&#xa;      for (size_t i = 0; i &lt; current_-&gt;files_[level].size(); i++)&#xa;      {&#xa;        const FileMetaData *f = current_-&gt;files_[level][i];&#xa;        current_-&gt;GetOverlappingInputs(level + 1, &amp;f-&gt;smallest, &amp;f-&gt;largest,&#xa;                                       &amp;overlaps);&#xa;        const int64_t sum = TotalFileSize(overlaps);&#xa;        if (sum &gt; result)&#xa;        {&#xa;          result = sum;&#xa;        }&#xa;      }&#xa;    }&#xa;    return result;&#xa;  }&#xa;  // Stores the minimal range that covers all entries in inputs in&#xa;  // *smallest, *largest.&#xa;  // REQUIRES: inputs is not empty&#xa;  void VersionSet::GetRange(const std::vector&lt;FileMetaData *&gt; &amp;inputs,&#xa;                            InternalKey *smallest,&#xa;                            InternalKey *largest)&#xa;  {&#xa;    assert(!inputs.empty());&#xa;    smallest-&gt;Clear();&#xa;    largest-&gt;Clear();&#xa;    for (size_t i = 0; i &lt; inputs.size(); i++)&#xa;    {&#xa;      FileMetaData *f = inputs[i];&#xa;      if (i == 0)&#xa;      {&#xa;        *smallest = f-&gt;smallest;&#xa;        *largest = f-&gt;largest;&#xa;      }&#xa;      else&#xa;      {&#xa;        if (icmp_.Compare(f-&gt;smallest, *smallest) &lt; 0)&#xa;        {&#xa;          *smallest = f-&gt;smallest;&#xa;        }&#xa;        if (icmp_.Compare(f-&gt;largest, *largest) &gt; 0)&#xa;        {&#xa;          *largest = f-&gt;largest;&#xa;        }&#xa;      }&#xa;    }&#xa;  }&#xa;  // Stores the minimal range that covers all entries in inputs1 and inputs2&#xa;  // in *smallest, *largest.&#xa;  // REQUIRES: inputs is not empty&#xa;  void VersionSet::GetRange2(const std::vector&lt;FileMetaData *&gt; &amp;inputs1,&#xa;                             const std::vector&lt;FileMetaData *&gt; &amp;inputs2,&#xa;                             InternalKey *smallest,&#xa;                             InternalKey *largest)&#xa;  {&#xa;    std::vector&lt;FileMetaData *&gt; all = inputs1;&#xa;    all.insert(all.end(), inputs2.begin(), inputs2.end());&#xa;    GetRange(all, smallest, largest);&#xa;  }&#xa;  Iterator *VersionSet::MakeInputIterator(Compaction *c)&#xa;  {&#xa;    ReadOptions options;&#xa;    options.verify_checksums = options_-&gt;paranoid_checks;&#xa;    options.fill_cache = false;&#xa;    // Level-0 files have to be merged together.  For other levels,&#xa;    // we will make a concatenating iterator per level.&#xa;    // TODO(opt): use concatenating iterator for level-0 if there is no overlap&#xa;    const int space = (c-&gt;level() == 0 ? c-&gt;inputs_[0].size() + 1 : 2);&#xa;    Iterator **list = new Iterator *[space];&#xa;    int num = 0;&#xa;    for (int which = 0; which &lt; 2; which++)&#xa;    {&#xa;      if (!c-&gt;inputs_[which].empty())&#xa;      {&#xa;        if (c-&gt;level() + which == 0)&#xa;        {&#xa;          const std::vector&lt;FileMetaData *&gt; &amp;files = c-&gt;inputs_[which];&#xa;          for (size_t i = 0; i &lt; files.size(); i++)&#xa;          {&#xa;            list[num++] = table_cache_-&gt;NewIterator(&#xa;                options, files[i]-&gt;number, files[i]-&gt;file_size);&#xa;          }&#xa;        }&#xa;        else&#xa;        {&#xa;          // Create concatenating iterator for the files from this level&#xa;          list[num++] = NewTwoLevelIterator(&#xa;              new Version::LevelFileNumIterator(icmp_, &amp;c-&gt;inputs_[which]),&#xa;              &amp;GetFileIterator, table_cache_, options);&#xa;        }&#xa;      }&#xa;    }&#xa;    assert(num &lt;= space);&#xa;    Iterator *result = NewMergingIterator(&amp;icmp_, list, num);&#xa;    delete[] list;&#xa;    return result;&#xa;  }&#xa;  Compaction *VersionSet::PickCompaction()&#xa;  {&#xa;    Compaction *c;&#xa;    int level;&#xa;    // We prefer compactions triggered by too much data in a level over&#xa;    // the compactions triggered by seeks.&#xa;    const bool size_compaction = (current_-&gt;compaction_score_ &gt;= 1);&#xa;    const bool seek_compaction = (current_-&gt;file_to_compact_ != NULL);&#xa;    if (size_compaction)&#xa;    {&#xa;      level = current_-&gt;compaction_level_;&#xa;      assert(level &gt;= 0);&#xa;      assert(level + 1 &lt; config::kNumLevels);&#xa;      c = new Compaction(options_, level);&#xa;      // Pick the first file that comes after compact_pointer_[level]&#xa;      for (size_t i = 0; i &lt; current_-&gt;files_[level].size(); i++)&#xa;      {&#xa;        FileMetaData *f = current_-&gt;files_[level][i];&#xa;        if (compact_pointer_[level].empty() ||&#xa;            icmp_.Compare(f-&gt;largest.Encode(), compact_pointer_[level]) &gt; 0)&#xa;        {&#xa;          c-&gt;inputs_[0].push_back(f);&#xa;          break;&#xa;        }&#xa;      }&#xa;      if (c-&gt;inputs_[0].empty())&#xa;      {&#xa;        // Wrap-around to the beginning of the key space&#xa;        c-&gt;inputs_[0].push_back(current_-&gt;files_[level][0]);&#xa;      }&#xa;    }&#xa;    else if (seek_compaction)&#xa;    {&#xa;      level = current_-&gt;file_to_compact_level_;&#xa;      c = new Compaction(options_, level);&#xa;      c-&gt;inputs_[0].push_back(current_-&gt;file_to_compact_);&#xa;    }&#xa;    else&#xa;    {&#xa;      return NULL;&#xa;    }&#xa;    c-&gt;input_version_ = current_;&#xa;    c-&gt;input_version_-&gt;Ref();&#xa;    // Files in level 0 may overlap each other, so pick up all overlapping ones&#xa;    if (level == 0)&#xa;    {&#xa;      InternalKey smallest, largest;&#xa;      GetRange(c-&gt;inputs_[0], &amp;smallest, &amp;largest);&#xa;      // Note that the next call will discard the file we placed in&#xa;      // c-&gt;inputs_[0] earlier and replace it with an overlapping set&#xa;      // which will include the picked file.&#xa;      current_-&gt;GetOverlappingInputs(0, &amp;smallest, &amp;largest, &amp;c-&gt;inputs_[0]);&#xa;      assert(!c-&gt;inputs_[0].empty());&#xa;    }&#xa;    SetupOtherInputs(c);&#xa;    return c;&#xa;  }&#xa;  void VersionSet::SetupOtherInputs(Compaction *c)&#xa;  {&#xa;    const int level = c-&gt;level();&#xa;    InternalKey smallest, largest;&#xa;    GetRange(c-&gt;inputs_[0], &amp;smallest, &amp;largest);&#xa;    current_-&gt;GetOverlappingInputs(level + 1, &amp;smallest, &amp;largest, &amp;c-&gt;inputs_[1]);&#xa;    // Get entire range covered by compaction&#xa;    InternalKey all_start, all_limit;&#xa;    GetRange2(c-&gt;inputs_[0], c-&gt;inputs_[1], &amp;all_start, &amp;all_limit);&#xa;    // See if we can grow the number of inputs in &quot;level&quot; without&#xa;    // changing the number of &quot;level+1&quot; files we pick up.&#xa;    if (!c-&gt;inputs_[1].empty())&#xa;    {&#xa;      std::vector&lt;FileMetaData *&gt; expanded0;&#xa;      current_-&gt;GetOverlappingInputs(level, &amp;all_start, &amp;all_limit, &amp;expanded0);&#xa;      const int64_t inputs0_size = TotalFileSize(c-&gt;inputs_[0]);&#xa;      const int64_t inputs1_size = TotalFileSize(c-&gt;inputs_[1]);&#xa;      const int64_t expanded0_size = TotalFileSize(expanded0);&#xa;      if (expanded0.size() &gt; c-&gt;inputs_[0].size() &amp;&amp;&#xa;          inputs1_size + expanded0_size &lt;&#xa;              ExpandedCompactionByteSizeLimit(options_))&#xa;      {&#xa;        InternalKey new_start, new_limit;&#xa;        GetRange(expanded0, &amp;new_start, &amp;new_limit);&#xa;        std::vector&lt;FileMetaData *&gt; expanded1;&#xa;        current_-&gt;GetOverlappingInputs(level + 1, &amp;new_start, &amp;new_limit,&#xa;                                       &amp;expanded1);&#xa;        if (expanded1.size() == c-&gt;inputs_[1].size())&#xa;        {&#xa;          Log(options_-&gt;info_log,&#xa;              &quot;Expanding@%d %d+%d (%ld+%ld bytes) to %d+%d (%ld+%ld bytes)\n&quot;,&#xa;              level,&#xa;              int(c-&gt;inputs_[0].size()),&#xa;              int(c-&gt;inputs_[1].size()),&#xa;              long(inputs0_size), long(inputs1_size),&#xa;              int(expanded0.size()),&#xa;              int(expanded1.size()),&#xa;              long(expanded0_size), long(inputs1_size));&#xa;          smallest = new_start;&#xa;          largest = new_limit;&#xa;          c-&gt;inputs_[0] = expanded0;&#xa;          c-&gt;inputs_[1] = expanded1;&#xa;          GetRange2(c-&gt;inputs_[0], c-&gt;inputs_[1], &amp;all_start, &amp;all_limit);&#xa;        }&#xa;      }&#xa;    }&#xa;    // Compute the set of grandparent files that overlap this compaction&#xa;    // (parent == level+1; grandparent == level+2)&#xa;    if (level + 2 &lt; config::kNumLevels)&#xa;    {&#xa;      current_-&gt;GetOverlappingInputs(level + 2, &amp;all_start, &amp;all_limit,&#xa;                                     &amp;c-&gt;grandparents_);&#xa;    }&#xa;    if (false)&#xa;    {&#xa;      Log(options_-&gt;info_log, &quot;Compacting %d &#39;%s&#39; .. &#39;%s&#39;&quot;,&#xa;          level,&#xa;          smallest.DebugString().c_str(),&#xa;          largest.DebugString().c_str());&#xa;    }&#xa;    // Update the place where we will do the next compaction for this level.&#xa;    // We update this immediately instead of waiting for the VersionEdit&#xa;    // to be applied so that if the compaction fails, we will try a different&#xa;    // key range next time.&#xa;    compact_pointer_[level] = largest.Encode().ToString();&#xa;    c-&gt;edit_.SetCompactPointer(level, largest);&#xa;  }&#xa;  Compaction *VersionSet::CompactRange(&#xa;      int level,&#xa;      const InternalKey *begin,&#xa;      const InternalKey *end)&#xa;  {&#xa;    std::vector&lt;FileMetaData *&gt; inputs;&#xa;    current_-&gt;GetOverlappingInputs(level, begin, end, &amp;inputs);&#xa;    if (inputs.empty())&#xa;    {&#xa;      return NULL;&#xa;    }&#xa;    // Avoid compacting too much in one shot in case the range is large.&#xa;    // But we cannot do this for level-0 since level-0 files can overlap&#xa;    // and we must not pick one file and drop another older file if the&#xa;    // two files overlap.&#xa;    if (level &gt; 0)&#xa;    {&#xa;      const uint64_t limit = MaxFileSizeForLevel(options_, level);&#xa;      uint64_t total = 0;&#xa;      for (size_t i = 0; i &lt; inputs.size(); i++)&#xa;      {&#xa;        uint64_t s = inputs[i]-&gt;file_size;&#xa;        total += s;&#xa;        if (total &gt;= limit)&#xa;        {&#xa;          inputs.resize(i + 1);&#xa;          break;&#xa;        }&#xa;      }&#xa;    }&#xa;    Compaction *c = new Compaction(options_, level);&#xa;    c-&gt;input_version_ = current_;&#xa;    c-&gt;input_version_-&gt;Ref();&#xa;    c-&gt;inputs_[0] = inputs;&#xa;    SetupOtherInputs(c);&#xa;    return c;&#xa;  }" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-57" vertex="1">
          <mxGeometry y="30" width="444" height="1837" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-51" value="table_cache.cc" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" parent="1" vertex="1">
          <mxGeometry x="778" y="3578" width="444" height="1502" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-52" value="  TableCache::TableCache(const std::string &amp;dbname,&#xa;                         const Options *options,&#xa;                         int entries)&#xa;      : env_(options-&gt;env),&#xa;        dbname_(dbname),&#xa;        options_(options),&#xa;        cache_(NewLRUCache(entries))&#xa;  {&#xa;  }&#xa;  TableCache::~TableCache()&#xa;  {&#xa;    delete cache_;&#xa;  }&#xa;  Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,&#xa;                               Cache::Handle **handle)&#xa;  {&#xa;    Status s;&#xa;    char buf[sizeof(file_number)];&#xa;    EncodeFixed64(buf, file_number);&#xa;    Slice key(buf, sizeof(buf));&#xa;    *handle = cache_-&gt;Lookup(key);&#xa;    if (*handle == NULL)&#xa;    {&#xa;      std::string fname = TableFileName(dbname_, file_number);&#xa;      RandomAccessFile *file = NULL;&#xa;      Table *table = NULL;&#xa;      s = env_-&gt;NewRandomAccessFile(fname, &amp;file);&#xa;      if (!s.ok())&#xa;      {&#xa;        std::string old_fname = SSTTableFileName(dbname_, file_number);&#xa;        if (env_-&gt;NewRandomAccessFile(old_fname, &amp;file).ok())&#xa;        {&#xa;          s = Status::OK();&#xa;        }&#xa;      }&#xa;      if (s.ok())&#xa;      {&#xa;        s = Table::Open(*options_, file, file_size, &amp;table);&#xa;      }&#xa;      if (!s.ok())&#xa;      {&#xa;        assert(table == NULL);&#xa;        delete file;&#xa;        // We do not cache error results so that if the error is transient,&#xa;        // or somebody repairs the file, we recover automatically.&#xa;      }&#xa;      else&#xa;      {&#xa;        TableAndFile *tf = new TableAndFile;&#xa;        tf-&gt;file = file;&#xa;        tf-&gt;table = table;&#xa;        *handle = cache_-&gt;Insert(key, tf, 1, &amp;DeleteEntry);&#xa;      }&#xa;    }&#xa;    return s;&#xa;  }&#xa;  Iterator *TableCache::NewIterator(const ReadOptions &amp;options,&#xa;                                    uint64_t file_number,&#xa;                                    uint64_t file_size,&#xa;                                    Table **tableptr)&#xa;  {&#xa;    if (tableptr != NULL)&#xa;    {&#xa;      *tableptr = NULL;&#xa;    }&#xa;    Cache::Handle *handle = NULL;&#xa;    Status s = FindTable(file_number, file_size, &amp;handle);&#xa;    if (!s.ok())&#xa;    {&#xa;      return NewErrorIterator(s);&#xa;    }&#xa;    Table *table = reinterpret_cast&lt;TableAndFile *&gt;(cache_-&gt;Value(handle))-&gt;table;&#xa;    Iterator *result = table-&gt;NewIterator(options);&#xa;    result-&gt;RegisterCleanup(&amp;UnrefEntry, cache_, handle);&#xa;    if (tableptr != NULL)&#xa;    {&#xa;      *tableptr = table;&#xa;    }&#xa;    return result;&#xa;  }&#xa;  Status TableCache::Get(const ReadOptions &amp;options,&#xa;                         uint64_t file_number,&#xa;                         uint64_t file_size,&#xa;                         const Slice &amp;k,&#xa;                         void *arg,&#xa;                         void (*saver)(void *, const Slice &amp;, const Slice &amp;))&#xa;  {&#xa;    Cache::Handle *handle = NULL;&#xa;    Status s = FindTable(file_number, file_size, &amp;handle);&#xa;    if (s.ok())&#xa;    {&#xa;      Table *t = reinterpret_cast&lt;TableAndFile *&gt;(cache_-&gt;Value(handle))-&gt;table;&#xa;      s = t-&gt;InternalGet(options, k, arg, saver);&#xa;      cache_-&gt;Release(handle);&#xa;    }&#xa;    return s;&#xa;  }&#xa;  void TableCache::Evict(uint64_t file_number)&#xa;  {&#xa;    char buf[sizeof(file_number)];&#xa;    EncodeFixed64(buf, file_number);&#xa;    cache_-&gt;Erase(Slice(buf, sizeof(buf)));&#xa;  }" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" parent="KjjygEA-8G5yH3GOAMU8-51" vertex="1">
          <mxGeometry y="30" width="444" height="1472" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-53" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="ToC9YKNpf1hCUuCHKTob-25" target="KjjygEA-8G5yH3GOAMU8-50" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-54" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1.015;entryY=0.059;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#0050ef;strokeColor=#001DBC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-50" target="KjjygEA-8G5yH3GOAMU8-52" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="1239" y="3249" />
              <mxPoint x="1239" y="3695" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-59" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;fillColor=#6a00ff;strokeColor=#3700CC;" parent="1" source="KjjygEA-8G5yH3GOAMU8-56" target="KjjygEA-8G5yH3GOAMU8-58" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="KjjygEA-8G5yH3GOAMU8-60" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" source="ToC9YKNpf1hCUuCHKTob-25" target="KjjygEA-8G5yH3GOAMU8-56" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-1" target="I3xbx4EHgzMkisGLF4hB-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-1" value="version" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-615" y="-2225" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-9" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-2" target="I3xbx4EHgzMkisGLF4hB-8">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-2" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;VersionSet&lt;/span&gt; &lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;vset_&lt;/span&gt;;&lt;span style=&quot;color: rgb(127, 132, 142); font-style: italic;&quot;&gt; // VersionSet to which this Version belongs&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Version&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;next_&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; &amp;nbsp; &amp;nbsp;// Next version in linked list&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Version&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;prev_&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; &amp;nbsp; &amp;nbsp;// Previous version in linked list&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;refs_&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Number of live refs to this version&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;vector&lt;/span&gt;&lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;FileMetaData&lt;/span&gt; &lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;files_&lt;/span&gt;[&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;config&lt;/span&gt;::&lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;kNumLevels&lt;/span&gt;];&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;FileMetaData&lt;/span&gt; &lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;file_to_compact_&lt;/span&gt;;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;file_to_compact_level_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;double&lt;/span&gt; &lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;compaction_score_&lt;/span&gt;;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;compaction_level_&lt;/span&gt;;&lt;/div&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-338" y="-2294.5" width="523" height="199" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-7" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-5" target="I3xbx4EHgzMkisGLF4hB-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-5" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;VersionSet&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-593" y="-1978" width="170" height="60" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-6" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;private:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;Env&lt;/span&gt; &lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;*const&lt;/span&gt; &lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;env_&lt;/span&gt;;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: #e5c07b;&quot;&gt;string&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;dbname_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Options&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*const&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;options_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;TableCache&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*const&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;table_cache_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;InternalKeyComparator&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;icmp_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;next_file_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;manifest_file_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;last_sequence_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;log_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;prev_log_number_&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; // 0 or backing store for memtable being compacted&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;WritableFile&lt;/span&gt; &lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;descriptor_file_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;log&lt;/span&gt;::&lt;span style=&quot;color: #e5c07b;&quot;&gt;Writer&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;descriptor_log_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Version&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;dummy_versions_&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; // Head of circular doubly-linked list of versions.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Version&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;current_&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; // == dummy_versions_.prev_&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;string&lt;/span&gt; &lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;compact_pointer_&lt;/span&gt;[&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;config&lt;/span&gt;::&lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;kNumLevels&lt;/span&gt;];&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-331" y="-2067" width="710" height="305" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-8" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;FileMetaData&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;refs&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;allowed_seeks&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; // Seeks allowed until compaction&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;number&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;file_size&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; &amp;nbsp; // File size in bytes&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;InternalKey&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;smallest&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; // Smallest internal key served by table&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;InternalKey&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;largest&lt;/span&gt;;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt; &amp;nbsp;// Largest internal key served by table&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #61afef;&quot;&gt;FileMetaData&lt;/span&gt;() : &lt;span style=&quot;color: #e06c75;&quot;&gt;refs&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;), &lt;span style=&quot;color: #e06c75;&quot;&gt;allowed_seeks&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;30&lt;/span&gt;), &lt;span style=&quot;color: #e06c75;&quot;&gt;file_size&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;) {}&amp;nbsp;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt;// 1&amp;lt;&amp;lt;30 == 1073741824&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="361" y="-2294.5" width="716" height="200" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-12" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-10" target="I3xbx4EHgzMkisGLF4hB-11">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-10" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;VersionEdit&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-661" y="-1706" width="170" height="60" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-11" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;private:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;friend&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;VersionSet&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;using&lt;/span&gt; &lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;DeletedFileSet&lt;/span&gt; &lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;set&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;pair&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: rgb(198, 120, 221);&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;uint64_t&lt;/span&gt;&amp;gt;&amp;gt;;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: rgb(229, 192, 123);&quot;&gt;string&lt;/span&gt; &lt;span style=&quot;color: rgb(224, 108, 117);&quot;&gt;comparator_&lt;/span&gt;;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;log_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;prev_log_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;uint64_t&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;next_file_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;SequenceNumber&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;last_sequence_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;has_comparator_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;has_log_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;has_prev_log_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;has_next_file_number_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;has_last_sequence_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #e5c07b;&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: #e5c07b;&quot;&gt;vector&lt;/span&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e5c07b;&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: #e5c07b;&quot;&gt;pair&lt;/span&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;lt;int&lt;/span&gt;, &lt;span style=&quot;color: #e5c07b;&quot;&gt;InternalKey&lt;/span&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;compact_pointers_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;DeletedFileSet&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;deleted_files_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: #e5c07b;&quot;&gt;vector&lt;/span&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e5c07b;&quot;&gt;std&lt;/span&gt;::&lt;span style=&quot;color: #e5c07b;&quot;&gt;pair&lt;/span&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;lt;int&lt;/span&gt;, &lt;span style=&quot;color: #e5c07b;&quot;&gt;FileMetaData&lt;/span&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;new_files_&lt;/span&gt;;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-335" y="-1699" width="564" height="318" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-13" target="I3xbx4EHgzMkisGLF4hB-14">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-17" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-13" target="I3xbx4EHgzMkisGLF4hB-16">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-25" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-13" target="I3xbx4EHgzMkisGLF4hB-20">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-13" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-2086" y="-1734" width="127" height="35" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-14" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;private:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;CleanupFunction&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;arg1&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;arg2&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #7f848e;font-style: italic;&quot;&gt;&amp;nbsp; &amp;nbsp; // No copying allowed&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #61afef;&quot;&gt;Iterator&lt;/span&gt;(&lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;amp;&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;operator&lt;/span&gt;&lt;span style=&quot;color: #61afef;&quot;&gt;=&lt;/span&gt;(&lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;amp;&lt;/span&gt;);&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1859" y="-1847.5" width="290" height="262" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-19" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-16" target="I3xbx4EHgzMkisGLF4hB-18">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-16" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;public:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #61afef;&quot;&gt;Iterator&lt;/span&gt;();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;~Iterator&lt;/span&gt;();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Valid&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;SeekToFirst&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;SeekToLast&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Seek&lt;/span&gt;(&lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;target&lt;/span&gt;) &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Next&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Prev&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;key&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;value&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Status&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;status&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: #c678dd;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; (*&lt;span style=&quot;color: #e5c07b;&quot;&gt;CleanupFunction&lt;/span&gt;)(&lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg1&lt;/span&gt;, &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg2&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;RegisterCleanup&lt;/span&gt;(&lt;span style=&quot;color: #e5c07b;&quot;&gt;CleanupFunction&lt;/span&gt; &lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;function&lt;/span&gt;, &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg1&lt;/span&gt;, &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg2&lt;/span&gt;);&lt;/div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1862" y="-1543" width="582" height="297" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-18" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt;::&lt;span style=&quot;color: #61afef;&quot;&gt;Iterator&lt;/span&gt;()&lt;/div&gt;&lt;div&gt;&amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;br&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt;::&lt;span style=&quot;color: #61afef;&quot;&gt;~&lt;/span&gt;&lt;span style=&quot;color: #61afef;&quot;&gt;Iterator&lt;/span&gt;()&lt;/div&gt;&lt;div&gt;&amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;NULL&lt;/span&gt;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; (&lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt;)(&lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;arg1&lt;/span&gt;, &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;arg2&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt;; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;NULL&lt;/span&gt;;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (&lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt;)(&lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;arg1&lt;/span&gt;, &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;arg2&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;delete&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;br&gt;&lt;div&gt;&amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt;::&lt;span style=&quot;color: #61afef;&quot;&gt;RegisterCleanup&lt;/span&gt;(&lt;span style=&quot;color: #e5c07b;&quot;&gt;CleanupFunction&lt;/span&gt; &lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;func&lt;/span&gt;, &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg1&lt;/span&gt;, &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg2&lt;/span&gt;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #d19a66;&quot;&gt;assert&lt;/span&gt;(&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;NULL&lt;/span&gt;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Cleanup&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;cleanup_&lt;/span&gt;.&lt;span style=&quot;color: #e06c75;&quot;&gt;next&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;func&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;arg1&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg1&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e06c75;&quot;&gt;c&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #e06c75;&quot;&gt;arg2&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;arg2&lt;/span&gt;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1122" y="-1543" width="350" height="829" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-22" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-20" target="I3xbx4EHgzMkisGLF4hB-21">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-24" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="I3xbx4EHgzMkisGLF4hB-20" target="I3xbx4EHgzMkisGLF4hB-23">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="-1845" y="-1124" />
              <mxPoint x="-1845" y="-805" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-20" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;EmptyIterator&lt;/span&gt; : &lt;span style=&quot;color: #c678dd;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Iterator&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-2245" y="-1184" width="296" height="26" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-21" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #c678dd;&quot;&gt;public:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #61afef;&quot;&gt;EmptyIterator&lt;/span&gt;(&lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Status&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;s&lt;/span&gt;) : &lt;span style=&quot;color: #e06c75;&quot;&gt;status_&lt;/span&gt;(&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;s&lt;/span&gt;) {}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Valid&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #c678dd;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #d19a66;&quot;&gt;false&lt;/span&gt;; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Seek&lt;/span&gt;(&lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #e06c75;font-style: italic;&quot;&gt;target&lt;/span&gt;) {}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;SeekToFirst&lt;/span&gt;() {}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;SeekToLast&lt;/span&gt;() {}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Next&lt;/span&gt;() { &lt;span style=&quot;color: #d19a66;&quot;&gt;assert&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;false&lt;/span&gt;); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #c678dd;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;Prev&lt;/span&gt;() { &lt;span style=&quot;color: #d19a66;&quot;&gt;assert&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;false&lt;/span&gt;); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;key&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #d19a66;&quot;&gt;assert&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt;();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;value&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #d19a66;&quot;&gt;assert&lt;/span&gt;(&lt;span style=&quot;color: #d19a66;&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Slice&lt;/span&gt;();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Status&lt;/span&gt; &lt;span style=&quot;color: #61afef;&quot;&gt;status&lt;/span&gt;() &lt;span style=&quot;color: #c678dd;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #c678dd;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;status_&lt;/span&gt;; }&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1747" y="-1233" width="433" height="370" as="geometry" />
        </mxCell>
        <mxCell id="I3xbx4EHgzMkisGLF4hB-23" value="&lt;div style=&quot;color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); font-family: Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14px; line-height: 19px;&quot;&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #c678dd;&quot;&gt;private:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #e5c07b;&quot;&gt;Status&lt;/span&gt; &lt;span style=&quot;color: #e06c75;&quot;&gt;status_&lt;/span&gt;;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1733" y="-825" width="168" height="40" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
